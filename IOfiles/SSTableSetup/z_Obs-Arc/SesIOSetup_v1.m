function[] = SesIOSetup()

%% Set paramiters
OutDir = ...
    fullfile(pwd, '\IOfiles\SessionData');

% Feilds for input structure
varin = [...
    {'Include'}, ...
    {'Age_Group'}, ...
    {'DOB'}, ...
    {'Yoke_Mate'}, ...
    {'CT'}, ...
    {'ICRb'}, ...
    {'ICRi'}, ...
    {'CT_Track_Sessions'}, ...
    {'CT_Forage_Sessions'}, ...
    {'ICRb_Track_Sessions'}, ...
    {'ICRb_Forage_Sessions'}, ...
    {'ICRi_Track_Sessions'}, ...
    {'ICRi_Forage_Sessions'}, ...
    {'Rotation_Sessions'}, ...
    {'CT_Finished'}, ...
    {'ICRb_Finished'}, ...
    {'ICRi_Finished'}, ...
    {'Feeder_Condition'}, ...
    {'Rotation_Direction'}, ...
    {'Reward_Ratio'}, ...
    {'Reward_Delay'}, ...
    {'Cue_Condition'}, ...
    {'Pulse_Duration'}, ...
    {'S1'},{'S2'},{'S3'}, ...
    {'A1'},{'A2'}, ...
    {'Start_Quadrant'}, ...
    {'Rotation_Positions'}, ...
    {'Rotations_Per_Session'}, ...
    {'Rewards_Per_Rotation'}, ...
    {'Days_Till_Rotation'} ...
    {'Implant_Coordinates'}, ...
    {'Implant_Configuration'} ...
    ];
% index of non catigorical variables
catind{1} = [1:7,15:17];

% Feilds for CT session output
varout{1} = [...
    {'Date'}, ...
    {'CT_Track_Session'}, ...
    {'CT_Forage_Sessions'}, ...
    {'CT_Track'}, ...
    {'CT_Forage'}, ...
    {'Total_Time'}, ...
    {'Lap_TS'}, ...
    {'Reward_TS'}, ...
    {'Reversal_Start_TS'}, ...
    {'Reversal_End_TS'} ...
    ];

% Feilds for ICR session output
varout{2} = [...
    {'Date'}, ...
    {'Recording_Directory'}, ...
    {'Start_Time'}, ...
    {'Total_Time'}, ...
    {'ICRb_Track'}, ...
    {'ICRb_Forage'}, ...
    {'ICRi_Track'}, ...
    {'ICRi_Forage'}, ...
    {'ICR_Rotation'}, ...
    {'ICRb_Track_Session'}, ...
    {'ICRb_Forage_Session'}, ...
    {'ICRi_Track_Session'}, ...
    {'ICRi_Forage_Session'}, ...
    {'Rotation_Session'}, ...
    {'Feeder_Condition'}, ...
    {'Rotation_Direction'}, ...
    {'Reward_Ratio'}, ...
    {'Reward_Delay'}, ...
    {'Cue_Condition'}, ...
    {'Pulse_Duration'}, ...
    {'S1'},{'S2'},{'S3'}, ...
    {'A1'},{'A2'}, ...
    {'Start_Quadrant'}, ...
    {'Rotation_Positions'}, ...
    {'Rotations_Per_Session'}, ...
    {'Rewards_Per_Rotation'}, ...
    {'Days_Till_Rotation'}, ...
    {'Reversals'}, ...
    {'Standard_Rewards'}, ...
    {'Rotated_Rewards'}, ...
    {'Standard_Laps'}, ...
    {'Rotated_Laps'}, ...
    ];

% Rat numbers (must be preceded by an 'r')
% ratlist = [...
%     {'r9827'}; ...
%     {'r9859'}; ...
%     {'r9842'}];
ratlist = [...
    {'r9835'}; ...
    {'r9888'}; ...
    {'r9890'}];

% Age group
% String = [{'Young'},{'Old'}];
agestr = [...
    {'Young'}; ...
    {'Old'}; ...
    {'Old'}];

% DOB date string
DOBstr = [...
    {'12/01/2014'}; ...
    {'09/01/2013'}; ...
    {'07/01/2013'}];
% convert to yy/mm/dd format
DOBstr = cellstr(datestr(DOBstr, 'yyyy/mm/dd'));


%% Create condition paramiters

% Var to save out input list
in_all = cell(length(ratlist),length(varin));
% Var to save out each rats data for circular track
out_ct = cell(0, length(varout{1}));
% Var to save out each rats data for icr arena
out_icr = cell(0, length(varout{2}));

in_all(1:length(ratlist), 1) = num2cell(true(length(ratlist),1));
in_all(1:length(ratlist), 2:4) = [agestr, DOBstr, ratlist];
in_all(1:length(ratlist), 5) = num2cell(true(length(ratlist),1));
in_all(1:length(ratlist), 6:7) =  num2cell(false(length(ratlist),2));
in_all(1:length(ratlist), 8:14) =  num2cell(zeros(length(ratlist),7));
in_all(1:length(ratlist), 15:17) =  num2cell(false(length(ratlist),3));
in_all(1:length(ratlist), 18:end) =  cell(length(ratlist),18);

% Convert to table
in_all = cell2table(in_all, 'VariableNames', varin);

% set sound and air vars to single var
in_all.S1 = [in_all.S1, in_all.S2, in_all.S3];
in_all(:,{'S2', 'S3'}) = [];
in_all.Properties.VariableNames{'S1'} = 'Sound_Conditions';
in_all.A1 = [in_all.A1, in_all.A2];
in_all(:,{'A2'}) = [];
in_all.Properties.VariableNames{'A1'} = 'Air_Conditions';

% Add rat row names
in_all.Properties.RowNames = ratlist;

% Set categorical variables
for i = catind{1}
    in_all.(in_all.Properties.VariableNames{i}) = ...
        categorical(in_all.(in_all.Properties.VariableNames{i}));
end

% Load existing dataset
% Check if files have already been made for earlier rats
if exist(fullfile(OutDir, 'SS_In_All.mat'), 'file')
    S = load(fullfile(OutDir, 'SS_Out_CT.mat'));
    SS_Out_CT = S.SS_Out_CT;
    S = load(fullfile(OutDir, 'SS_Out_ICR.mat'));
    SS_Out_ICR = S.SS_Out_ICR;
    S = load(fullfile(OutDir, 'SS_In_All.mat'));
    SS_In_All = S.SS_In_All;
    
    % Add into main struct
    in_all = [SS_In_All; in_all];
end

% Copy sorted rat data
SS_In_All = sortrows(in_all, 'RowNames');


% Loop through rats and add data to struct
for z_rat = 1:length(ratlist)
    SS_Out_CT.(ratlist{z_rat}) = cell2table(out_ct, 'VariableNames', varout{1});
    SS_Out_ICR.(ratlist{z_rat}) = cell2table(out_icr, 'VariableNames', varout{2});
    % set sound and air vars to single var
    SS_Out_ICR.(ratlist{z_rat}).S1 = [SS_Out_ICR.(ratlist{z_rat}).S1, SS_Out_ICR.(ratlist{z_rat}).S2, SS_Out_ICR.(ratlist{z_rat}).S3];
    SS_Out_ICR.(ratlist{z_rat})(:,{'S2', 'S3'}) = [];
    SS_Out_ICR.(ratlist{z_rat}).Properties.VariableNames{'S1'} = 'Sound_Conditions';
    SS_Out_ICR.(ratlist{z_rat}).A1 = [SS_Out_ICR.(ratlist{z_rat}).A1, SS_Out_ICR.(ratlist{z_rat}).A2];
    SS_Out_ICR.(ratlist{z_rat})(:,{'A2'}) = [];
    SS_Out_ICR.(ratlist{z_rat}).Properties.VariableNames{'A1'} = 'Air_Conditions';
end

% Sort fields by rat
[~, ind2] = sort(fieldnames(SS_Out_CT));
SS_Out_CT = orderfields(SS_Out_CT, ind2);
[~, ind3] = sort(fieldnames(SS_Out_ICR));
SS_Out_ICR = orderfields(SS_Out_ICR, ind3);

% Save out variables
save(fullfile(OutDir,'SS_In_All'), 'SS_In_All')
save(fullfile(OutDir,'SS_Out_CT'), 'SS_Out_CT')
save(fullfile(OutDir,'SS_Out_ICR'), 'SS_Out_ICR')

% % Check field class
% flds = fieldnames(SS_In_All);
% for i = 1:length(flds)
%     sprintf('%s %s', flds{i}, class(SS_In_All(1).(flds{i})))
%     pause
% end



