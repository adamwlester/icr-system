<VisualMicro>
  <Program Name="FeederDue" Ext=".ino" Location="C:\Users\lester\MeDocuments\Research\BarnesLab\Study_ICR\Code\Arduino\FeederDue">
    <Compile IsDebugStart="1" CompilerErrors="0" ConfigurationName="Debug" StopOnError="False" OptimiseLibs="True" OptimiseCore="True" BuildPath="C:\Users\lester\AppData\Local\Temp\VMicroBuilds\FeederDue\arduino_due_x" ReCompileIfSourceIsNewer="1" IsGdb="0" SketchName="FeederDue" ReportDigitalPins="0" ReportAnalogPins="0" ReportI2C="0" ReportFreeMemory="0" IncludeDebug="1" LastDebugPreProcessorDefinitions="VM_DEBUG;VM_DEBUG_ENABLE 1;VM_DEBUG_BANDWIDTH_THROTTLE_MS 25;VM_DEBUGGER_TYPE_HARDWARESERIAL 0;VM_DEBUGGER_TYPE_SOFTWARESERIAL 1;VM_DEBUGGER_TYPE_FASTSERIAL 2;VM_DEBUGGER_TYPE_USB 3;VM_DEBUGGER_TYPE_TEENSY 4;VM_DEBUGGER_TYPE_UART 5;VM_DEBUGGER_TYPE_USART 6;VM_DEBUGGER_TYPE_USBSERIAL 7;VM_DEBUGGER_TYPE_TTYUART 8;VM_DEBUGGER_TYPE_NET_CONSOLE 9;VM_DEBUGGER_TYPE_Uart 10;VM_DEBUGGER_TYPE_COSA 11;VM_DEBUGGER_TYPE_CDCSerialClass 12;VM_DEBUGGER_TYPE_HARDWARESERIAL1 13;VM_DEBUGGER_TYPE_HARDWARESERIAL2 14;VM_DEBUGGER_TYPE_HARDWARESERIAL3 15;VM_DEBUGGER_TYPE VM_DEBUGGER_TYPE_USB;VM_DEBUGGER_SUB_TYPE VM_DEBUGGER_TYPE_USB_SAM;VM_DEBUG_BREAKPAUSE;" IncludesDebug="1" IsCompiled="1" />
    <Platform Name="arduino16x" Package="arduino" Platform="sam" Architecture="4.8.3-2014q1">
      <Board Name="arduino_due_x" Description="Arduino Due (Native USB Port)" CoreFolder="C:\Users\lester\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.8\cores\arduino" VariantFullPath="C:\Users\lester\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.8\variants\arduino_due_x" McuIdePath="C:\Program Files (x86)\Arduino" McuSketchBookPath="C:\Users\lester\MeDocuments\AppData\Arduino" name="Arduino Due (Native USB Port)" vid.0="0x2341" pid.0="0x003e" vid.1="0x2A03" pid.1="0x003e" upload.tool="bossac" upload.protocol="sam-ba" upload.maximum_size="524288" upload.use_1200bps_touch="true" upload.wait_for_upload_port="true" upload.native_usb="true" build.mcu="cortex-m3" build.f_cpu="84000000L" build.usb_manufacturer="&quot;Arduino LLC&quot;" build.usb_product="&quot;Arduino Due&quot;" build.board="SAM_DUE" build.core="arduino" build.extra_flags="-D__SAM3X8E__ -mthumb {build.usb_flags}" build.ldscript="linker_scripts/gcc/flash.ld" build.variant="arduino_due_x" build.variant_system_lib="libsam_sam3x8e_gcc_rel.a" build.vid="0x2341" build.pid="0x003e" runtime.ide.path="C:\Program Files (x86)\Arduino" runtime.os="windows" build.system.path="C:\Users\lester\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.8\system" runtime.ide.version="10609" target_package="arduino" target_platform="sam" runtime.hardware.path="C:\Users\lester\AppData\Local\arduino15\packages\arduino\hardware\sam" originalid="arduino_due_x" intellisense.tools.path="{runtime.ide.path}/hardware/tools/g++_arm_none_eabi" intellisense.include.paths="{runtime.tools.arm-none-eabi-gcc.path}/arm-none-eabi\include\c++\4.8.3;{runtime.tools.arm-none-eabi-gcc.path}/arm-none-eabi/include/c++/4.8.3/arm-none-eabi/;{runtime.tools.arm-none-eabi-gcc.path}/arm-none-eabi/include/;{runtime.tools.arm-none-eabi-gcc.path}\lib\gcc\arm-none-eabi\4.8.3\include;{build.core.coresparentfolder.vmresolved}\system\CMSIS\Device\ATMEL\;{build.core.coresparentfolder.vmresolved}\system\libsam;{build.core.coresparentfolder.vmresolved}\system\libsam\include;{build.core.coresparentfolder.vmresolved}\system\CMSIS\CMSIS\Include\;{build.core.coresparentfolder.vmresolved}\system\CMSIS\CMSIS\Include\;{vm.boardsource.path}\system\CMSIS\CMSIS\Include\;{vm.boardsource.path}\system\CMSIS\Device\ATMEL\;{vm.boardsource.path}\system\libsam;{vm.boardsource.path}\system\libsam\include;{intellisense.tools.path}\arm-none-eabi\include;{intellisense.tools.path}\arm_none_eabi\include\;{intellisense.tools.path}\lib\gcc\arm-none-eabi\4.4.1\include;{intellisense.tools.path}\lib\gcc\arm-none-eabi\4.4.1\include\;{build.core.coresparentfolder.vmresolved}/system/CMSIS/Device/ATMEL/sam3xa/include/pio;{build.core.coresparentfolder.vmresolved}/system/libsam/include;{build.core.coresparentfolder.vmresolved}/CMSIS/CMSIS/Include/;{build.core.coresparentfolder.vmresolved}/system/CMSIS/Device/ATMEL/sam3xa/include;{build.core.coresparentfolder.vmresolved}\system/libsam;{build.core.coresparentfolder.vmresolved}\system/CMSIS/Device/ATMEL;{build.core.coresparentfolder.vmresolved}\system/CMSIS/Device/ATMEL/sam3xa/include;" tools.atprogram.cmd.path="%AVRSTUDIO_EXE_PATH%\atbackend\atprogram" tools.atprogram.cmd.setwinpath="true" tools.atprogram.program.params.verbose="-v" tools.atprogram.program.params.quiet="-q" tools.atprogram.program.pattern="&quot;{cmd.path}&quot; -d {build.mcu} {program.verbose} {program.extra_params} program -c -f &quot;{build.path}\{build.project_name}.hex&quot;" tools.atprogram.program.xpattern="&quot;{cmd.path}&quot; {AVRSTUDIO_BACKEND_CONNECTION} -d {build.mcu} {program.verbose} {program.extra_params} program -c -f &quot;{build.path}\{build.project_name}.hex&quot;" version="1.6.8" compiler.warning_flags="-w" compiler.warning_flags.none="-w" compiler.warning_flags.default="" compiler.warning_flags.more="-Wall" compiler.warning_flags.all="-Wall -Wextra" compiler.path="{runtime.tools.arm-none-eabi-gcc.path}/bin/" compiler.c.cmd="arm-none-eabi-gcc" compiler.c.flags="-c -g -Os {compiler.warning_flags} -std=gnu11 -ffunction-sections -fdata-sections -nostdlib --param max-inline-insns-single=500 -Dprintf=iprintf -MMD" compiler.c.elf.cmd="arm-none-eabi-gcc" compiler.c.elf.flags="-Os -Wl,--gc-sections" compiler.S.cmd="arm-none-eabi-gcc" compiler.S.flags="-c -g -x assembler-with-cpp" compiler.cpp.cmd="arm-none-eabi-g++" compiler.cpp.flags="-c -g -Os {compiler.warning_flags} -std=gnu++11 -ffunction-sections -fdata-sections -nostdlib -fno-threadsafe-statics --param max-inline-insns-single=500 -fno-rtti -fno-exceptions -Dprintf=iprintf -MMD" compiler.ar.cmd="arm-none-eabi-ar" compiler.ar.flags="rcs" compiler.objcopy.cmd="arm-none-eabi-objcopy" compiler.objcopy.eep.flags="-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0" compiler.elf2hex.flags="-O binary" compiler.elf2hex.cmd="arm-none-eabi-objcopy" compiler.ldflags="" compiler.size.cmd="arm-none-eabi-size" compiler.define="-DARDUINO=" compiler.combine.flags="-u _sbrk -u link -u _close -u _fstat -u _isatty -u _lseek -u _read -u _write -u _exit -u kill -u _getpid" compiler.c.extra_flags="" compiler.c.elf.extra_flags="" compiler.cpp.extra_flags="" compiler.S.extra_flags="" compiler.ar.extra_flags="" compiler.elf2hex.extra_flags="" compiler.libsam.c.flags="&quot;-I{build.system.path}/libsam&quot; &quot;-I{build.system.path}/CMSIS/CMSIS/Include/&quot; &quot;-I{build.system.path}/CMSIS/Device/ATMEL/&quot;" build.usb_flags="-DUSB_VID={build.vid} -DUSB_PID={build.pid} -DUSBCON '-DUSB_MANUFACTURER={build.usb_manufacturer}' '-DUSB_PRODUCT={build.usb_product}'" recipe.c.o.pattern="&quot;{compiler.path}{compiler.c.cmd}&quot; {compiler.c.flags} -mcpu={build.mcu} -mthumb -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.c.extra_flags} {build.extra_flags} {compiler.libsam.c.flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.cpp.o.pattern="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpp.flags} -mcpu={build.mcu} -mthumb -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {compiler.libsam.c.flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.S.o.pattern="&quot;{compiler.path}{compiler.S.cmd}&quot; {compiler.S.flags} -mcpu={build.mcu} -mthumb -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.S.extra_flags} {build.extra_flags} {compiler.libsam.c.flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" archive_file_path="{build.path}/{archive_file}" recipe.ar.pattern="&quot;{compiler.path}{compiler.ar.cmd}&quot; {compiler.ar.flags} {compiler.ar.extra_flags} &quot;{archive_file_path}&quot; &quot;{object_file}&quot;" recipe.c.combine.pattern="&quot;{compiler.path}{compiler.c.elf.cmd}&quot; -mcpu={build.mcu} -mthumb {compiler.c.elf.flags} &quot;-T{build.variant.path}/{build.ldscript}&quot; &quot;-Wl,-Map,{build.path}/{build.project_name}.map&quot; {compiler.c.elf.extra_flags} -o &quot;{build.path}/{build.project_name}.elf&quot; &quot;-L{build.path}&quot; -Wl,--cref -Wl,--check-sections -Wl,--gc-sections -Wl,--entry=Reset_Handler -Wl,--unresolved-symbols=report-all -Wl,--warn-common -Wl,--warn-section-align -Wl,--start-group {compiler.combine.flags} {object_files} &quot;{build.variant.path}/{build.variant_system_lib}&quot; &quot;{build.path}/{archive_file}&quot; -Wl,--end-group -lm -gcc" recipe.objcopy.bin.pattern="&quot;{compiler.path}{compiler.elf2hex.cmd}&quot; {compiler.elf2hex.flags} {compiler.elf2hex.extra_flags} &quot;{build.path}/{build.project_name}.elf&quot; &quot;{build.path}/{build.project_name}.bin&quot;" recipe.output.tmp_file="{build.project_name}.bin" recipe.output.save_file="{build.project_name}.{build.variant}.bin" recipe.size.pattern="&quot;{compiler.path}{compiler.size.cmd}&quot; -A &quot;{build.path}/{build.project_name}.elf&quot;" recipe.size.regex="\.text\s+([0-9]+).*" tools.bossac.path="{runtime.tools.bossac.path}" tools.bossac.cmd="bossac.exe" tools.bossac.cmd.windows="bossac.exe" tools.bossac.upload.params.verbose="-i -d" tools.bossac.upload.params.quiet="" tools.bossac.upload.params.verify="-v" tools.bossac.upload.pattern="&quot;{path}/{cmd}&quot; {upload.verbose} --port={serial.port.file} -U {upload.native_usb} -e -w {upload.verify} -b &quot;{build.path}/{build.project_name}.bin&quot; -R" tools.bossac_remote.upload.pattern="/usr/bin/run-bossac {upload.verbose} --port=ttyATH0 -U {upload.native_usb} -e -w -v -b /tmp/sketch.bin -R" vm.platform.root.path="C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\Extensions\nuze3zh3.ug2\Micro Platforms\arduino16x" runtime.tools.arm-none-eabi-gcc.path="C:\Users\lester\AppData\Local\arduino15\packages\arduino\tools\arm-none-eabi-gcc\4.8.3-2014q1" runtime.tools.arm-none-eabi-gcc-4.8.3-2014q1.path="C:\Users\lester\AppData\Local\arduino15\packages\arduino\tools\arm-none-eabi-gcc\4.8.3-2014q1" runtime.tools.avrdude.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.avrdude-6.0.1-arduino5.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.avr-gcc.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.avr-gcc-4.8.1-arduino5.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.bossac.path="C:\Users\lester\AppData\Local\arduino15\packages\arduino\tools\bossac\1.6.1-arduino" runtime.tools.bossac-1.6.1-arduino.path="C:\Users\lester\AppData\Local\arduino15\packages\arduino\tools\bossac\1.6.1-arduino" runtime.vm.boardinfo.id="arduino_due_x" runtime.vm.boardinfo.name="arduino_due_x" runtime.vm.boardinfo.desc="Arduino Due (Native USB Port)" runtime.vm.boardinfo.src_location="C:\Users\lester\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.8" ide.hint="For all platforms that use Board Manager" ide.location.key="Arduino16x" ide.location.ide.winreg="Arduino 1.6.x Application" ide.location.sketchbook.winreg="Arduino 1.6.x Sketchbook" ide.location.sketchbook.preferences="sketchbook.path" ide.default.revision_name="1.6.9" ide.default.version="10609" ide.default.package="arduino" ide.default.platform="avr" ide.multiplatform="true" ide.includes="arduino.h" ide.exe_name="arduino" ide.platformswithoutpackage="false" ide.includes.fallback="wprogram.h" ide.extension="ino" ide.extension.fallback="pde" ide.versionGTEQ="160" ide.exe="arduino.exe" ide.hosts="atmel" ide.url="http://arduino.cc/en/Main/Software" ide.help.reference.path="reference\arduino.cc\en\Reference" ide.help.reference.path2="reference\www.arduino.cc\en\Reference" ide.help.reference.serial="reference\www.arduino.cc\en\Serial" vm.debug="true" software="ARDUINO" ssh.user.name="root" ssh.user.default.password="arduino" ssh.host.wwwfiles.path="/www/sd" build.working_directory="{runtime.ide.path}" ide.location.preferences.portable="{runtime.ide.path}\portable" ide.location.preferences="%VM_APPDATA_LOCAL%\arduino15\preferences.txt" ide.location.preferences_fallback="%VM_APPDATA_ROAMING%\arduino15\preferences.txt" ide.location.contributions="%VM_APPDATA_LOCAL%\arduino15" ide.location.contributions_fallback="%VM_APPDATA_ROAMING%\arduino15" ide.contributions.boards.allow="true" ide.contributions.boards.ignore_unless_rewrite_found="true" ide.contributions.libraries.allow="true" ide.contributions.boards.support.urls.wiki="https://github.com/arduino/Arduino/wiki/Unofficial-list-of-3rd-party-boards-support-urls" ide.create_platforms_from_boardsTXT.teensy="build.core" ide.appid="arduino16x" location.sketchbook="C:\Users\lester\MeDocuments\AppData\Arduino" build.core.vmresolved="C:\Users\lester\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.8\cores\arduino" build.core.parentfolder.vmresolved="C:\Users\lester\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.8\cores" build.core.coresparentfolder.vmresolved="C:\Users\lester\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.8" build.core.path="C:\Users\lester\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.8\cores\arduino" vm.core.include="arduino.h" vm.boardsource.path="C:\Users\lester\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.8" runtime.platform.path="C:\Users\lester\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.8" vm.platformname.name="sam" build.arch="SAM" build.variant.vmresolved="C:\Users\lester\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.8\variants\arduino_due_x" build.architecture="4.8.3-2014q1" vmresolved.compiler.path="C:\Users\lester\AppData\Local\arduino15\packages\arduino\tools\arm-none-eabi-gcc\4.8.3-2014q1\bin\" vmresolved.tools.path="C:\Users\lester\AppData\Local\arduino15\packages\arduino\tools\arm-none-eabi-gcc\4.8.3-2014q1" vm.runtime.compiler.showwarnings="false" vm.runtime.upload.verbose="false" vm.runtime.upload.verify="false" vm.runtime.compiler.auto_discover_includes="true" vm.last.buildpath="C:\Users\lester\AppData\Local\Temp\VMicroBuilds\FeederDue\arduino_due_x" />
    </Platform>
    <Debug EnableBreak="1" DebugMode="Full" DebugEnabled="1" HitCounterType="0" JumpToSource="0" RemotePortSpeed="115200" LocalPortSpeed="115200" IncludeDisabledBreakpoints="0" BandWidthThrottleEnabled="1" RemotePortTransport="HardwareSerial" IsGdb="0" RemotePortSpeedWrittenToDebugSource="115200" />
    <VCCodeModel>
      <VCCodeMacros />
    </VCCodeModel>
    <BreakPoints>
      <BreakPoint Index="1" Name="FeederDue.ino, line 1249" Id="47126a7d-c10c-4379-87f0-8e12b2e870d9" Enabled="1" Message="{millis()}{millis() - t_loopMain}{fc_motorControl}{fc_isBlockingTill}{t_blockTill}{&quot;BULL&quot;}{fc_doBulldoze}{bull.mode}{bull.state}{bull.t_bullNext}{bull.bDelay}{bull.bSpeed}{bull.timesUp}{bull.posCheck}{bull.posNow}{bull.distMoved}{bull.hasMoved}{bull.passedReset}{&quot;PID&quot;}{pid.runSpeed}{pid.error}{errorDefault}{errorFeeder}{pid.mode}{pid.doDamp}{pid.isDampened}{pid.setPoint}{defualtSetPoint}{pid.deltaSetpoint}{pid.isHolding4cross}{pid.ekfReady}{pid.runSpeed}{&quot;POS&quot;}{pos_robVT.tsNow}{pos_ratVT.tsNow}{pos_ratPixy.tsNow}{pos_robVT.dtFrame}{pos_ratVT.dtFrame}{pos_ratPixy.dtFrame}{ekf_ratPos}{ekf_robPos}{ekf_ratVel}{ekf_robVel}{pos_robVT.GetPos()-pos_ratVT.GetPos()}{pos_ratPixy.GetPos()-pos_ratVT.GetPos()}{pos_robVT.GetPos()}{pos_ratVT.GetPos()}{pos_ratPixy.GetPos()}{pos_robVT.nLaps}{pos_ratVT.nLaps}{pos_ratPixy.nLaps}{pos_robVT.GetVel()}{pos_ratVT.GetVel()}{pos_ratPixy.GetVel()}{&quot;FLOW&quot;} {fc_doQuit}{fc_isManualSes}{fc_doRewTone}{fc_doStartTracking}{fc_isTrackingReady}{fc_isHalted}{fc_doCheckDoneRcvd}{&quot;MOVE&quot;}{fc_doMove}{fc_isMoveTargSet}{movePos}{&quot;REW&quot;}{rewCnt}{fc_doRew}{fc_doCue}{fc_isCueTargSet}{rewPos}{&quot;SERIAL&quot;}{msg_id}{msg_pass}{packNow}{cnt_overflowEvt}{cnt_timeoutEvt}{cnt_packResend} {cnt_droppedPacks} {Serial1.available()} {Serial1.availableForWrite()}" MessageTextType="0" PreProcessedMessage="{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}{14}{15}{16}{17}{18}{19}{20}{21}{22}{23}{24}{25}{26}{27}{28}{29}{30}{19}{32}{33}{34}{35}{36}{37}{38}{39}{40}{41}{42}{43}{44}{45}{46}{47}{48}{49}{50}{51}{52}{53}{54} {55}{56}{57}{58}{59}{60}{61}{62}{63}{64}{65}{66}{67}{68}{69}{70}{71}{72}{73}{74}{75}{76}{77}{78} {79} {80} {81}" Condition="millis()%100 == 0" ConditionType="1" CurrentHits="0" File="c:\users\lester\medocuments\research\barneslab\study_icr\code\arduino\feederdue\feederdue.ino" FileLine="1249" FileColumn="1" FunctionName="" FunctionLineOffset="1" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='47126a7d-c10c-4379-87f0-8e12b2e870d9'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>1242		board.hardHiZ();
1243		//RunMotor('f', 0, "None");
1244	
1245	}
1246	
1247	
1248	// ---------MAIN LOOP---------
--&gt;1249	void loop() {
1250	
1251		// Store loop time
1252		t_loopMain = millis();
1253	
1254	#pragma region //--- FIRST PASS SETUP ---
1255		if (fc_isFirstPass)
1256		{
1257			// Blink to show setup done
1258			SetupBlink();
</Source>
        <MessageVariables>
          <MessageVariable Name="millis()" Index="1" />
          <MessageVariable Name="millis() - t_loopMain" Index="2" />
          <MessageVariable Name="fc_motorControl" Index="3" />
          <MessageVariable Name="fc_isBlockingTill" Index="4" />
          <MessageVariable Name="t_blockTill" Index="5" />
          <MessageVariable Name="&quot;BULL&quot;" Index="6" />
          <MessageVariable Name="fc_doBulldoze" Index="7" />
          <MessageVariable Name="bull.mode" Index="8" />
          <MessageVariable Name="bull.state" Index="9" />
          <MessageVariable Name="bull.t_bullNext" Index="10" />
          <MessageVariable Name="bull.bDelay" Index="11" />
          <MessageVariable Name="bull.bSpeed" Index="12" />
          <MessageVariable Name="bull.timesUp" Index="13" />
          <MessageVariable Name="bull.posCheck" Index="14" />
          <MessageVariable Name="bull.posNow" Index="15" />
          <MessageVariable Name="bull.distMoved" Index="16" />
          <MessageVariable Name="bull.hasMoved" Index="17" />
          <MessageVariable Name="bull.passedReset" Index="18" />
          <MessageVariable Name="&quot;PID&quot;" Index="19" />
          <MessageVariable Name="pid.runSpeed" Index="20" />
          <MessageVariable Name="pid.error" Index="21" />
          <MessageVariable Name="errorDefault" Index="22" />
          <MessageVariable Name="errorFeeder" Index="23" />
          <MessageVariable Name="pid.mode" Index="24" />
          <MessageVariable Name="pid.doDamp" Index="25" />
          <MessageVariable Name="pid.isDampened" Index="26" />
          <MessageVariable Name="pid.setPoint" Index="27" />
          <MessageVariable Name="defualtSetPoint" Index="28" />
          <MessageVariable Name="pid.deltaSetpoint" Index="29" />
          <MessageVariable Name="pid.isHolding4cross" Index="30" />
          <MessageVariable Name="pid.ekfReady" Index="31" />
          <MessageVariable Name="pid.runSpeed" Index="32" />
          <MessageVariable Name="&quot;POS&quot;" Index="33" />
          <MessageVariable Name="pos_robVT.tsNow" Index="34" />
          <MessageVariable Name="pos_ratVT.tsNow" Index="35" />
          <MessageVariable Name="pos_ratPixy.tsNow" Index="36" />
          <MessageVariable Name="pos_robVT.dtFrame" Index="37" />
          <MessageVariable Name="pos_ratVT.dtFrame" Index="38" />
          <MessageVariable Name="pos_ratPixy.dtFrame" Index="39" />
          <MessageVariable Name="ekf_ratPos" Index="40" />
          <MessageVariable Name="ekf_robPos" Index="41" />
          <MessageVariable Name="ekf_ratVel" Index="42" />
          <MessageVariable Name="ekf_robVel" Index="43" />
          <MessageVariable Name="pos_robVT.GetPos()-pos_ratVT.GetPos()" Index="44" />
          <MessageVariable Name="pos_ratPixy.GetPos()-pos_ratVT.GetPos()" Index="45" />
          <MessageVariable Name="pos_robVT.GetPos()" Index="46" />
          <MessageVariable Name="pos_ratVT.GetPos()" Index="47" />
          <MessageVariable Name="pos_ratPixy.GetPos()" Index="48" />
          <MessageVariable Name="pos_robVT.nLaps" Index="49" />
          <MessageVariable Name="pos_ratVT.nLaps" Index="50" />
          <MessageVariable Name="pos_ratPixy.nLaps" Index="51" />
          <MessageVariable Name="pos_robVT.GetVel()" Index="52" />
          <MessageVariable Name="pos_ratVT.GetVel()" Index="53" />
          <MessageVariable Name="pos_ratPixy.GetVel()" Index="54" />
          <MessageVariable Name="&quot;FLOW&quot;" Index="55" />
          <MessageVariable Name="fc_doQuit" Index="56" />
          <MessageVariable Name="fc_isManualSes" Index="57" />
          <MessageVariable Name="fc_doRewTone" Index="58" />
          <MessageVariable Name="fc_doStartTracking" Index="59" />
          <MessageVariable Name="fc_isTrackingReady" Index="60" />
          <MessageVariable Name="fc_isHalted" Index="61" />
          <MessageVariable Name="fc_doCheckDoneRcvd" Index="62" />
          <MessageVariable Name="&quot;MOVE&quot;" Index="63" />
          <MessageVariable Name="fc_doMove" Index="64" />
          <MessageVariable Name="fc_isMoveTargSet" Index="65" />
          <MessageVariable Name="movePos" Index="66" />
          <MessageVariable Name="&quot;REW&quot;" Index="67" />
          <MessageVariable Name="rewCnt" Index="68" />
          <MessageVariable Name="fc_doRew" Index="69" />
          <MessageVariable Name="fc_doCue" Index="70" />
          <MessageVariable Name="fc_isCueTargSet" Index="71" />
          <MessageVariable Name="rewPos" Index="72" />
          <MessageVariable Name="&quot;SERIAL&quot;" Index="73" />
          <MessageVariable Name="msg_id" Index="74" />
          <MessageVariable Name="msg_pass" Index="75" />
          <MessageVariable Name="packNow" Index="76" />
          <MessageVariable Name="cnt_overflowEvt" Index="77" />
          <MessageVariable Name="cnt_timeoutEvt" Index="78" />
          <MessageVariable Name="cnt_packResend" Index="79" />
          <MessageVariable Name="cnt_droppedPacks" Index="80" />
          <MessageVariable Name="Serial1.available()" Index="81" />
          <MessageVariable Name="Serial1.availableForWrite()" Index="82" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="2" Name="FeederDue.ino, line 1945" Id="98c92763-bd2a-4567-8d8a-ff1bbd36c385" Enabled="0" Message="{msg_id}{match}{buff}{Serial1.available()}{cnt_overflowEvt}{cnt_timeoutEvt}" MessageTextType="2" PreProcessedMessage="{0}{1}{2}{3}{4}{5}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\lester\medocuments\research\barneslab\study_icr\code\arduino\feederdue\feederdue.ino" FileLine="1945" FileColumn="1" FunctionName="WaitBuffRead(byte match)" FunctionLineOffset="57" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='98c92763-bd2a-4567-8d8a-ff1bbd36c385'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>1938			if (Serial1.available() &gt;= SERIAL_BUFFER_SIZE - 1)
1939			{
1940				// DUMP IT ALL
1941				while (Serial1.available() &gt; 0)
1942				{
1943					Serial1.read();
1944				}
--&gt;1945				cnt_overflowEvt++;
1946			}
1947	
1948			// Timed out
1949			if (millis() &gt; t_out)
1950			{
1951				cnt_timeoutEvt++;
1952			}
1953	
1954			// Set buff to 255 ((byte)-1) if !pass
</Source>
        <MessageVariables>
          <MessageVariable Name="msg_id" Index="1" />
          <MessageVariable Name="match" Index="2" />
          <MessageVariable Name="buff" Index="3" />
          <MessageVariable Name="Serial1.available()" Index="4" />
          <MessageVariable Name="cnt_overflowEvt" Index="5" />
          <MessageVariable Name="cnt_timeoutEvt" Index="6" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="3" Name="FeederDue.ino, line 1951" Id="534acf10-0eb0-4ce3-886d-e51bde94bc8a" Enabled="0" Message="{msg_id}{match}{buff}{Serial1.available()}{cnt_overflowEvt}{cnt_timeoutEvt}" MessageTextType="2" PreProcessedMessage="{0}{1}{2}{3}{4}{5}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\lester\medocuments\research\barneslab\study_icr\code\arduino\feederdue\feederdue.ino" FileLine="1951" FileColumn="1" FunctionName="WaitBuffRead(byte match)" FunctionLineOffset="63" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='534acf10-0eb0-4ce3-886d-e51bde94bc8a'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>1944				}
1945				cnt_overflowEvt++;
1946			}
1947	
1948			// Timed out
1949			if (millis() &gt; t_out)
1950			{
--&gt;1951				cnt_timeoutEvt++;
1952			}
1953	
1954			// Set buff to 255 ((byte)-1) if !pass
1955			buff = 255;
1956		}
1957	
1958		// Store time
1959		t_loopRead = millis() - (t_out - time_out);
1960		// Return buffer
</Source>
        <MessageVariables>
          <MessageVariable Name="msg_id" Index="1" />
          <MessageVariable Name="match" Index="2" />
          <MessageVariable Name="buff" Index="3" />
          <MessageVariable Name="Serial1.available()" Index="4" />
          <MessageVariable Name="cnt_overflowEvt" Index="5" />
          <MessageVariable Name="cnt_timeoutEvt" Index="6" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="4" Name="FeederDue.ino, line 1733" Id="2eef4562-4a39-4f3e-b305-6e06c10e404c" Enabled="0" Message="{buff}{Serial1.available()}{cnt_overflowEvt}{cnt_timeoutEvt}" MessageTextType="2" PreProcessedMessage="{0}{1}{2}{3}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\lester\medocuments\research\barneslab\study_icr\code\arduino\feederdue\feederdue.ino" FileLine="1733" FileColumn="1" FunctionName="ParseSerial()" FunctionLineOffset="13" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='2eef4562-4a39-4f3e-b305-6e06c10e404c'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>1726		bool loop;
1727		msg_id == ' ';
1728	
1729		// Dump data till msg header byte is reached
1730		buff = WaitBuffRead(c2r_head[0]);
1731		if (buff == 255)
1732		{
--&gt;1733			return pass = false;
1734		}
1735	
1736		// get header
1737		u.f = 0.0f;
1738		u.b[0] = buff;
1739		u.b[1] = WaitBuffRead(0);
1740		head[0] = u.c[0];
1741		head[1] = u.c[1];
1742	
</Source>
        <MessageVariables>
          <MessageVariable Name="buff" Index="1" />
          <MessageVariable Name="Serial1.available()" Index="2" />
          <MessageVariable Name="cnt_overflowEvt" Index="3" />
          <MessageVariable Name="cnt_timeoutEvt" Index="4" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="5" Name="FeederDue.ino, line 716" Id="1b204b46-dc5c-479a-bf89-02824e687bb3" Enabled="0" Message="{cnt}{deltaSetpoint}" MessageTextType="2" PreProcessedMessage="{0}{1}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\lester\medocuments\research\barneslab\study_icr\code\arduino\feederdue\feederdue.ino" FileLine="716" FileColumn="1" FunctionName="class PID::CheckDamp()" FunctionLineOffset="38" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='1b204b46-dc5c-479a-bf89-02824e687bb3'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>709					cnt++;
710					ChangeSetpoint(delta_set);
711				}
712				else
713				{
714					ChangeSetpoint(0);
715					isDampened = false;
--&gt;716					damp_for = 0;
717				}
718			}
719		}
720	
721		void CheckMotorControl()
722		{
723			// Check if motor control available
724			if ((fc_motorControl == "PID" || fc_motorControl == "Open") &amp;&amp;
725				mode == "Manual")
</Source>
        <MessageVariables>
          <MessageVariable Name="cnt" Index="1" />
          <MessageVariable Name="deltaSetpoint" Index="2" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="6" Name="FeederDue.ino, line 2968" Id="aaee0d2a-f446-4979-ac4e-32806813dad8" Enabled="0" Message="{printQueue[printQueue_lng - 1]}" MessageTextType="2" PreProcessedMessage="{0}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\lester\medocuments\research\barneslab\study_icr\code\arduino\feederdue\feederdue.ino" FileLine="2968" FileColumn="1" FunctionName="PrintDebug2LCD()" FunctionLineOffset="36" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='aaee0d2a-f446-4979-ac4e-32806813dad8'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>2961			myGLCD.print(printQueue[i], LEFT, ind);
2962	
2963			// Update
2964			myGLCD.update();
2965		}
2966	
2967		// Update queue index
--&gt;2968		printQueueInd++;
2969	
2970		// Set to not print again if all printed
2971		if (printQueueInd == printQueue_lng - 1)
2972		{
2973			doPrint = false;
2974		}
2975	
2976	}
2977	
</Source>
        <MessageVariables>
          <MessageVariable Name="printQueue[printQueue_lng - 1]" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="7" Name="FeederDue.ino, line 1277" Id="d8290631-c8a1-438a-81de-5a0c1855c9a5" Enabled="0" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\lester\medocuments\research\barneslab\study_icr\code\arduino\feederdue\feederdue.ino" FileLine="1277" FileColumn="1" FunctionName="loop()" FunctionLineOffset="29" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='d8290631-c8a1-438a-81de-5a0c1855c9a5'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>1270			// Reset volatiles
1271			vol_doChangeSolState = false;
1272			vol_doRew = false;
1273			vol_doChangeLCDstate = false;
1274			vol_doIRhardStop = false;
1275	
1276			fc_isFirstPass = false;
--&gt;1277			DebugState("RESET");
1278	
1279		}
1280	#pragma endregion
1281	
1282	#pragma region //--- PRINT DEBUG ---
1283	
1284		// Print to LCD
1285		if (doPrint &amp;&amp; 
1286			doDebugLCD &amp;&amp; 
</Source>
      </BreakPoint>
      <BreakPoint Index="8" Name="FeederDue.ino, line 2827" Id="728a6998-e3d7-42d1-8ceb-69c82458d376" Enabled="0" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\lester\medocuments\research\barneslab\study_icr\code\arduino\feederdue\feederdue.ino" FileLine="2827" FileColumn="1" FunctionName="StartRew()" FunctionLineOffset="32" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='728a6998-e3d7-42d1-8ceb-69c82458d376'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>2820	
2821		// Open solenoid
2822		digitalWrite(pin_Rel_1, HIGH);
2823	
2824		// Print to LCD for manual rewards
2825		if (vol_doRew)
2826		{
--&gt;2827			PrintLCD("REWARDING...");
2828		}
2829	
2830		// indicate reward in progress
2831		fc_isRewarding = true;
2832	}
2833	
2834	// END REWARD
2835	void EndRew()
2836	{
</Source>
      </BreakPoint>
      <BreakPoint Index="9" Name="FeederDue.ino, line 2852" Id="349d5596-16bb-49cb-ad9b-9299ef9436a7" Enabled="0" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\lester\medocuments\research\barneslab\study_icr\code\arduino\feederdue\feederdue.ino" FileLine="2852" FileColumn="1" FunctionName="EndRew()" FunctionLineOffset="17" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='349d5596-16bb-49cb-ad9b-9299ef9436a7'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>2845		{
2846			digitalWrite(pin_Rel_1, LOW);
2847	
2848			// Clear LCD
2849			ClearLCD();
2850	
2851			// indicate reward finished
--&gt;2852			fc_isRewarding = false;
2853		}
2854	
2855	}
2856	
2857	// OPEN/CLOSE SOLONOID
2858	void OpenCloseSolonoid()
2859	{
2860		// Local vars
2861		byte sol_state = digitalRead(pin_Rel_1);
</Source>
      </BreakPoint>
    </BreakPoints>
  </Program>
</VisualMicro>