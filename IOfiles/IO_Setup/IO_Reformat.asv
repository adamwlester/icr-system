function [] = IO_Reformat()

% Directory containing tables
topDir = 'C:\Users\lester\MeDocuments\Research\BarnesLab\Study_ICR\ICR_Code\ICR_Running\Main\MATLAB';
ioDir = regexp(topDir,'.*(?=\ICR_Running)','match');
ioDir = fullfile(ioDir{:},'ICR_Running\IOfiles\SessionData'); 

%% =========================== LOAD TABLES ================================
[SS_IO_1, SS_IO_2, TT_IO_1, TT_IO_2] = LoadTables(ioDir); %#ok<ASGLU>

%% ========================== WHAT TO CHANGE ==============================

% ------------------------------- ADD VAR ---------------------------------

% Specify new variable to add

% EXAMPLE 1
%   Weight_Baseline = NaN;
%   SS_IO_1 = AddNewVar(SS_IO_1, Weight_Baseline, 'Yoke_Mate', '', 'g');
% 
% EXAMPLE 2
%  TT_I = NaN;
%  TT_IO_2 = AddNewVar(TT_IO_2, TT_I, '_F', '[TT Impedance]', 'MOhm', true);
   
% --------------------------- CHANGE VAR ENTRY ----------------------------

% % Specify inputs
% var_change = 'Sleep_Time';
% new_val = nan(1,2);
% preserve_val = false;
% description = [];
% units = [];
% 
% 
% 
% % Make changes
% SS_IO_2 = ChangeVarEntries(SS_IO_2, var_change, new_val, preserve_val);

% ------------------------ MOVE DELETE VAR ENTRY --------------------------

% EXAMPLE 1
%   var_move = 'Implanted';
%   var_before = 'Include_Analysis';
%   do_remove = false;
%   SS_IO_1 = MoveVarEntries(SS_IO_1, var_move, var_before, do_remove);
%
% EXAMPLE 2
  var_move = '_I';
  var_before = '_F';
  do_remove = true;
  TT_IO_2 = MoveVarEntries(TT_IO_2, var_move, var_before, true, do_remove);

%% =========================== SAVE TABLES ================================

save(fullfile(ioDir,'SS_IO_1'), 'SS_IO_1');
save(fullfile(ioDir,'SS_IO_2'), 'SS_IO_2');
save(fullfile(ioDir,'TT_IO_1'), 'TT_IO_1');
save(fullfile(ioDir,'TT_IO_2'), 'TT_IO_2');

%% ============================ FUNCTIONS =================================


% ADD NEW VAR TO TABLE
    function [T2] = AddNewVar(T, new_var, var_before, description_str, unit_str, tt_var)
        % INPUT:
        %   T(table): Table to be modified
        %   new_var(any class): Var to be added
        %   var_before(string): Variable that new var should be after
        
        % Get input names as string
        table_name = inputname(1);
        var_name = inputname(2);
        
        % Set default for optional inputs
        if nargin < 3
            var_before = '';
            description_str = [];
            unit_str = [];
            tt_var = false;
        elseif nargin < 4
            description_str = [];
            unit_str = [];
            tt_var = false;
        elseif nargin < 5
            unit_str = [];
            tt_var = false;
        elseif nargin < 6
            tt_var = false;
        end
        
        % Determine what table is being changed
        if strcmp(table_name, 'SS_IO_2') || strcmp(table_name, 'TT_IO_2')
            
            % Add for each field (rat) entry
            T2 = structfun(@(x) AddV(x, new_var, var_name, var_before, description_str, unit_str, tt_var), T, 'uni', false);
            
        elseif strcmp(table_name, 'SS_IO_1') || strcmp(table_name, 'TT_IO_1')
            
            % Add single instance
            T2 = AddV(T, new_var, var_name, var_before, description_str, unit_str, tt_var);
            
        end
        
        % Add var function
        function [t] = AddV(t, nv, vn, vb, dsc, unt, tt_v)
            
            % Get other info
            tab_vars = t.Properties.VariableNames;
            
            % Handle TT_IO_2 entry
            if tt_v
                str = sprintf('(TT|R)\\d*(?=%s)', vb);
                tt_list = regexp(t.Properties.VariableNames, str, 'match');
                tt_list = [tt_list{:}];
                vb = cellfun(@(x) [x, vb], tt_list, 'uni', false);
                vn = vn(3:end);
                vn = cellfun(@(x) [x, vn], tt_list, 'uni', false);
                
            else
                % Convert vn to cell
                vn = {vn};
            end
            
            % Check for optional inputs
            if ~strcmp(vb, '') % var to put new var after
                col_ind = find(ismember(tab_vars, vb));
            else
                % Put at end
                col_ind = width(t);
            end
            
            % Copy table
            t2 = t;
            
            % Loop through each new colum (only relivant for TT_IO_2 tt entries)
            for z_v = 1:length(col_ind)
                
                % Update column ind
                c_ind = col_ind(z_v) + z_v-1;
                
                % Repmat var to table height and make into table
                t_new = table(repmat(nv, height(t2), 1), 'VariableNames', vn(z_v));
                
                % Fold into table
                if c_ind ~= width(t)
                    t2 = [t2(:,1:c_ind), t_new, t2(:,c_ind+1:end)];
                else
                    t2 = [t2, t_new];
                end
                
                % Add description and units
                if ~isempty(dsc)
                    t2.Properties.VariableDescriptions{vn{z_v}} = dsc;
                end
                if ~isempty(unt)
                    t2.Properties.VariableUnits{vn{z_v}} = unt;
                end
                
            end
            
            % Update table
            t = t2;
            
        end
        
    end

% CHANGE OLD VAR IN TABLE
    function [T2] = ChangeVarEntries(T, var_change, new_val, preserve_val, description_str, unit_str)
        % INPUT:
        %   T(table): Table to be modified
        %   var_change(string): Var to change
        %   new_val(any): new default value
        %   preserve_val(bool)[optional]: specify if filled entries should
        %       be preserved
        
        % Handle inputs
        if nargin < 5
            unit_str = [];
            description_str = [];
        elseif nargin < 6
            unit_str = [];
        end
        
        % Get input names as string
        table_name = inputname(1);
        
        % Determine what table is being changed
        if strcmp(table_name, 'SS_IO_2') || strcmp(table_name, 'TT_IO_2')
            
            % Add for each field (rat) entry
            T2 = structfun(@(x) ChngV(x, var_change, new_val, preserve_val, description_str, unit_str), T, 'uni', false);
            
        elseif strcmp(table_name, 'SS_IO_1') || strcmp(table_name, 'TT_IO_1')
            
            % Add single instance
            T2 = ChngV(T, var_change, new_val, preserve_val, description_str, unit_str);
            
        end
        
        % Change var function
        function [t] = ChngV(t, vc, nv, pv, dsc, unt)
            
            % Make new entry
            v_new = repmat(nv, height(t), 1);
            
            % Just replace if not carrying over old entries
            if ~pv
                t.(vc) = v_new;
            else
                for z_v = 1:height(t)
                    do_keep = false;
                    % Check for cell
                    if isa(t.(vc)(z_v),'cell')
                        
                        % Check for nested cell
                        if isa(t.(vc){z_v},'cell')
                            if isa(t.(vc){z_v}{1},'categorical')
                                do_keep = ~isundefined(t.(vc){z_v}{1});
                            elseif isa(t.(vc){z_v}{1},'string') || isnumeric(t.(vc){z_v}{1})
                                do_keep = ~isempty(t.(vc){z_v}{1});
                            end
                        else
                            if isa(t.(vc){z_v},'categorical')
                                do_keep = ~isundefined(t.(vc){z_v});
                            elseif isa(t.(vc){z_v},'string') || isnumeric(t.(vc){z_v})
                                do_keep = ~isempty(t.(vc){z_v});
                            end
                        end
                         
                        % Copy over 
                        if do_keep
                            v_new(z_v) = t.(vc)(z_v);
                        end
                        
                        % Check for categorical
                    elseif isa(t.(vc)(z_v),'categorical')
                        % Check for vals to keep
                        if (~isundefined(t.(vc)(z_v)))
                            % Duplicate value
                            if isa(nv,'cell')
                                v_new(z_v) = {repmat(t.(vc)(z_v),size(nv{:}))};
                            else
                                v_new(z_v) = t.(vc)(z_v);
                            end
                        end
                        
                        % Check for numeric or string
                    elseif isa(t.(vc)(z_v),'string') || isnumeric(t.(vc)(z_v))
                       % Check for vals to keep
                        if (~isempty(t.(vc)(z_v)))
                            % Duplicate value
                            if isa(nv,'cell')
                                v_new(z_v) = {repmat(t.(vc)(z_v),size(nv{:}))};
                            else
                                v_new(z_v) = t.(vc)(z_v);
                            end
                        end
                    end
                end
                % Copy to table
                    t.(vc) = v_new;
            end
            
            % Add description and units
            if ~isempty(dsc)
                t.Properties.VariableDescriptions{vc} = dsc;
            end
            if ~isempty(unt)
                t.Properties.VariableUnits{vc} = unt;
            end
            
        end
        
    end

% MOVE VAR IN TABLE
    function [T2] = MoveVarEntries(T, var_move, var_before, tt_var, remove_var)
        % INPUT:
        %   T(table): Table to be modified
        %   var_move(string): Var to move
        %   var_before(string): Variable that new var should be after
        
        % Handle inputs
        if nargin < 5
            remove_var = false;
        elseif nargin < 4
            remove_var = false;
            tt_var = false;
        end
        
        % Get input names as string
        table_name = inputname(1);
        
        % Determine what table is being changed
        if strcmp(table_name, 'SS_IO_2') || strcmp(table_name, 'TT_IO_2')
            
            % Add for each field (rat) entry
            T2 = structfun(@(x) MoveV(x, var_move, var_before, tt_var, remove_var), T, 'uni', false);
            
        elseif strcmp(table_name, 'SS_IO_1') || strcmp(table_name, 'TT_IO_1')
            
            % Add single instance
            T2 = MoveV(T, var_move, var_before, tt_var, remove_var);
            
        end
        
        % Move var function
        function [t] = MoveV(t, vm, vb, tt_v, rmv)
            
            % Get other info
            tab_vars = t.Properties.VariableNames;
            
            % Handle TT_IO_2 entry
            if tt_v
                str = sprintf('(TT|R)\\d*(?=%s)', vb);
                tt_list = regexp(t.Properties.VariableNames, str, 'match');
                tt_list = [tt_list{:}];
                vb = cellfun(@(x) [x, vb], tt_list, 'uni', false);
                vm = cellfun(@(x) [x, vm], tt_list, 'uni', false);
                
            else
                % Convert vm to cell
                vm = {vm};
            end
            
             % Check for optional inputs
            if ~strcmp(vb, '') % var to put new var after
                col_ind = find(ismember(tab_vars, vb));
            else
                % Put at end
                col_ind = width(t);
            end
            
             % Copy table
            t2 = t;
            
            % Loop through each new colum (only relivant for TT_IO_2 tt entries)
            for z_v = 1:length(col_ind)
                
                % Store var and delete
                t_dat = table(t2.(vm{z_v}), 'VariableNames', vm(z_v));
                t2.(vm{z_v}) = [];
                
                % Check if just removing
                if rmv
                    continue
                end
                
                % Update column ind
                c_ind = col_ind(z_v) + z_v-1;
                
                % Fold into table
                if c_ind ~= width(t)
                    t2 = [t(:,1:c_ind), t_dat, t(:,c_ind+1:end)];
                else
                    t2 = [t2, t_dat];
                end
                
                % Add description and units
                if ~isempty(dsc)
                    t2.Properties.VariableDescriptions{vm{z_v}} = dsc;
                end
                if ~isempty(unt)
                    t2.Properties.VariableUnits{vm{z_v}} = unt;
                end
                
            end
            
            % Update table
            t = t2;
            
        end
        
    end

% LOAD TABLE
    function [ss_io_1, ss_io_2, tt_io_1, tt_io_2] = LoadTables(io_dir)
        
        % Chenge directory
        if ~ismember(regexp(pwd,'\w+(?=$)','match'), regexp(io_dir,'\w+(?=$)','match'))
            cd(io_dir);
        end
        
        % Import session data
        s = load('SS_IO_1.mat');
        ss_io_1 = s.SS_IO_1;
        s = load('SS_IO_2.mat');
        ss_io_2 = s.SS_IO_2;
        s = load('TT_IO_1.mat');
        tt_io_1 = s.TT_IO_1;
        s = load('TT_IO_2.mat');
        tt_io_2 = s.TT_IO_2;
        
    end



end