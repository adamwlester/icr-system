function TT_TRACK

%% TT_TRACK is a gui for tracking and plotting tetrode depths.

% Print that script is running
fprintf('\r\nRUNNING TT_TRACK.m\n  Time: %s\r\n', ...
    datestr(now, 'HH:MM:SS AM'))

%%  Set all Dameters used in all GUI functions

% "TT" will be passed between all functions used
TT = struct;

% Main directories

% Top directory for TT log files
TT.PAR.logDir = fullfile(pwd,'\IOfiles\SessionData');
% Image directory
TT.PAR.imgDir = fullfile(pwd,'\IOfiles\Images');

% Unit values
% In radians; use negative for angled toward the nose
TT.UI.bndAng = [deg2rad(270), deg2rad(270-10)];
% Implant location posterior to bragma for hipp and mec (mm)
TT.UI.xStrt = [5.1, 9.35];
% Implant location dorsal/ventral  for hipp and mec (mm)
TT.UI.yStrt = [0.5, 1.5];
% Cannula spacing (mm)
TT.UI.canSp = 0.23;
% Turn to mm conversion
TT.UI.trn2mm = 0.32;
% Track lines offset (mm)
TT.UI.linOfst = 0.025;

% Colors
TT.UI.btnCols = [0.75 0 0; 0 0.75 0]; % color
%==========================================================================

% Get rat list
TT.PAR.ratList = dir(TT.PAR.logDir);
TT.PAR.ratList = regexp({TT.PAR.ratList.name}, '\d*(?=_tt)', 'match');
TT.PAR.ratList = [{'Select Rat'},[TT.PAR.ratList{:}]];

% Get image list
TT.PAR.atlFi = dir(fullfile(TT.PAR.imgDir, 'Paxinos'));
TT.PAR.atlFi = {TT.PAR.atlFi(3:end-1).name};

%% Start creating GUI objects

% Border offset for all GUI features
TT.UI.bordOff = 20; % pixels
sc = get(0,'MonitorPositions');
sc1 = sc(1,:);
sc2 = sc(2,:);
TT.UI.qstDlfPos = [sc1(3) + sc2(3)/2, sc2(4)/2]; % questions dialogue pos

% Main figure
TT.UI.figPos = [0 0 980 800];
TT.UI.fig = figure(...
    'Units','Pixels',...
    'Position',TT.UI.figPos,...
    'Color', [1 1 1],...
    'Name','TT Track',...
    'Tag','figure1',...
    'MenuBar', 'none',... % hide menu
    'Visible','off'); % hide figure durring creation
movegui('center')
% Make sure that closeGUI_Callback is ran if window is closed
% set(TT.UI.fig,'CloseRequestFcn',@closeGUI_Callback)

% Axis for plotting Paxinos image
TT.UI.axeImgPos = ...
    [TT.UI.bordOff, TT.UI.bordOff, TT.UI.figPos(4)-2*TT.UI.bordOff, TT.UI.figPos(4)-2*TT.UI.bordOff];
TT.UI.axeImg = axes(...
    'Parent', TT.UI.fig,...
    'Units','Pixels',...
    'Position',TT.UI.axeImgPos,...
    'XTick', [], ...
    'YTick', [], ...
    'Visible', 'off');
TT.UI.axeTTtrk = axes(...
    'Parent', TT.UI.fig,...
    'Units','Pixels',...
    'Position',TT.UI.axeImgPos,...
    'XLim', [0,12], ...
    'YLim', [0,12], ...
    'XTick', 0:12, ...
    'YTick', 0:12, ...
    'YDir', 'Reverse', ...
    'Color', 'None', ...
    'Visible', 'on');
hold on
box on
grid on

% Create axis for TT locs legend
% hipp
wdht = 125; % width/hight of axis
pos = [TT.UI.axeImgPos(1)+TT.UI.bordOff/2, TT.UI.axeImgPos(2)+TT.UI.bordOff/2, wdht, wdht];
TT.UI.ttLoc(1) = axes(...
    'Parent', TT.UI.fig,...
    'Units','pixels',...
    'Position', pos,...
    'Color', [1 1 1],...
    'XTick', [], ...
    'YTick', [], ...
    'Visible', 'on');
set(TT.UI.ttLoc(1), 'Title', ...
    text('String','Hipp Bundle','FontSize',15,'FontWeight','bold','Color','k'))
box on
hold on
% mec
pos = [sum(pos([1,3]))+TT.UI.bordOff/2, pos(2), pos(3), pos(4)];
TT.UI.ttLoc(2) = axes(...
    'Parent', TT.UI.fig,...
    'Units','pixels',...
    'Position', pos,...
    'Color', [1 1 1],...
    'XTick', [], ...
    'YTick', [], ...
    'Visible', 'on');
set(TT.UI.ttLoc(2), 'Title', ...
    text('String','MEC Bundle','FontSize',15,'FontWeight','bold','Color','k'))
box on
hold on

TT.PAR.dirVec = [{'N'},{'NNE'},{'NE'},{'ENE'},{'E'},{'ESE'},{'SE'},{'SSE'},{'S'},...
    {'SSW'},{'SW'},{'WSW'},{'W'},{'WNW'},{'NW'},{'NNW'}];

TT.PAR.imgInd = [1:length(TT.PAR.atlFi)]; % will keep track of current desplayed image

% Import images and put up first image
for z_atl = 1:length(TT.PAR.atlFi)
    TT.UI.atlMat{z_atl} = ...
        imread(fullfile(TT.PAR.imgDir, 'Paxinos', TT.PAR.atlFi{z_atl}));
end
% Plot imported image data
imagesc(TT.UI.atlMat{1}, 'Parent', TT.UI.axeImg); colormap('bone');
set(TT.UI.axeImg, 'Visible', 'Off')
axis image
hold on
uistack(TT.UI.axeTTtrk,'top')
uistack(TT.UI.ttLoc,'top')

%% Add UI Objects
TT.UI.dfltLft = sum(TT.UI.axeImgPos([1,3]))+TT.UI.bordOff; % default left pos
TT.UI.dfltWd = TT.UI.figPos(3)-TT.UI.dfltLft-TT.UI.bordOff; % default width pos
TT.UI.dfltHt = 40; % default width pos
TT.UI.dfltSp = 20; % spacing

% Switch image button
% back
pos = [sum(TT.UI.axeImgPos([1,3]))-50*3-TT.UI.bordOff/2, sum(TT.UI.axeImgPos([2,4]))-TT.UI.bordOff/2-25, 50, 25];
TT.UI.btnSwtchImg(1) = uicontrol('style','push', ...
    'Parent', TT.UI.fig, ...
    'Enable', 'On', ...
    'String',char(220),...
    'Callback', {@BtnSwtchImg},...
    'UserData', 1, ...
    'Value', 0, ...
    'Units','Pixels', ...
    'Position', pos, ...
    'FontWeight','Bold',...
    'FontName','Symbol',...
    'FontSize',30);
% text
pos = [pos(1)+pos(3), pos(2), pos(3), pos(4)];
TT.UI.txtImg = uicontrol('Style','text', ...
    'Parent',TT.UI.fig, ...
    'String',TT.PAR.atlFi{1}(5:8), ...
    'Units','Pixels', ...
    'Position', pos, ...
    'HorizontalAlignment', 'Center',...
    'BackgroundColor', [0,0,0], ...
    'ForegroundColor', [1,1,1], ...
    'FontWeight','Bold',...
    'FontName','MS Sans Serif',...
    'FontSize', 14);
% forward
pos = [pos(1)+pos(3), pos(2), pos(3), pos(4)];
TT.UI.btnSwtchImg(1) = uicontrol('style','push', ...
    'Parent', TT.UI.fig, ...
    'Enable', 'On', ...
    'String',char(222),...
    'Callback', {@BtnSwtchImg},...
    'UserData', -1, ...
    'Value', 0, ...
    'Units','Pixels', ...
    'Position', pos, ...
    'FontWeight','Bold',...
    'FontName','Symbol',...
    'FontSize',30);

% Load popup
posLoad = [TT.UI.dfltLft, TT.UI.figPos(4)-TT.UI.bordOff-TT.UI.dfltHt, TT.UI.dfltWd, TT.UI.dfltHt];
TT.UI.popLoadTT = uicontrol('Style','popupmenu', ...
    'Parent', TT.UI.fig, ...
    'Enable', 'On', ...
    'String',TT.PAR.ratList,...
    'Callback', {@PopLoadTT},...
    'FontName','Courier New',...
    'UserData', 1, ...
    'Units','Pixels', ...
    'Position', posLoad, ...
    'FontWeight','Bold',...
    'FontSize',14);

% Save button
posSave = [TT.UI.dfltLft, TT.UI.bordOff, TT.UI.dfltWd/2-5, TT.UI.dfltHt];
TT.UI.btnSaveAll = uicontrol('style','push', ...
    'Parent', TT.UI.fig, ...
    'Enable', 'On', ...
    'String','SAVE',...
    'Callback', {@BtnSaveAll},...
    'UserData', 0, ...
    'Units','Pixels', ...
    'Position', posSave, ...
    'FontWeight','Bold',...
    'FontSize',14);

% Quit button
posQuit = [TT.UI.dfltLft+TT.UI.dfltWd/2+5, TT.UI.bordOff, TT.UI.dfltWd/2-5, TT.UI.dfltHt];
TT.UI.btnQuit = uicontrol('style','push', ...
    'Parent', TT.UI.fig, ...
    'Enable', 'On', ...
    'String','QUIT',...
    'Callback', {@BtnQuit},...
    'UserData', 0, ...
    'Units','Pixels', ...
    'Position', posQuit, ...
    'FontWeight','Bold',...
    'FontSize',14);

% area for tt buttons
TT.UI.ttBtnRng = (TT.UI.figPos(4) - posLoad(4) - posSave(4) - TT.UI.dfltSp*3 - 2*TT.UI.bordOff) * 0.4;
% area for tt pannel
TT.UI.ttPanRng = (TT.UI.figPos(4) - posLoad(4) - posSave(4) - TT.UI.dfltSp*3 - 2*TT.UI.bordOff) * 0.6;
TT.UI.ttPanPos = [TT.UI.dfltLft, TT.UI.bordOff+posSave(4)+TT.UI.dfltSp, TT.UI.dfltWd, TT.UI.ttPanRng];


%% Store main GUI data and show figure
set(TT.UI.fig,'Visible','On')
guidata(TT.UI.fig,TT)

%% Create Callback functions

% --- Load all preveous TT data
    function PopLoadTT(~, ~, ~)
        % Get handle data
        TT = guidata(TT.UI.fig);
        
        % Get rat number as string
        TT.D.ratID = TT.PAR.ratList{get(gcbo, 'Value')};
        
        % Read in rat specific data
        TTL = [];
        load(fullfile(TT.PAR.logDir, [TT.D.ratID,'_ttl']));
        % Note: For TTL.P rows go from L-M from top-bottom and A-P from left-right
        TT.D.logDat = TTL.D; % copy log data
        TT.D.ttPos = TTL.P; % copy implant pos
        TT.D.ttList = TTL.L; % copy tt list pos
        % get number of tts in each bundle
        TT.D.nTT = cellfun(@length, TT.D.ttList);
        
        % colect headers in a seperate cell array
        TT.D.logHead = fieldnames(TT.D.logDat);
        % get session number
        TT.D.Ses = TT.D.logDat(end).Session + 1;
        
        % Get/set vars based on log dat from last session
        TT.D.logNew = TT.D.logDat(end);
        % Add new ses and date
        TT.D.logNew(1).Session = TT.D.Ses;
        TT.D.logNew(1).Date = datestr(clock, 'yyyy-mm-dd_HH-MM-SS', 'local');
        
        % PLOT TT LOCS
        % Tetrode colors locations
        TT.UI.ttLabCol{1} = hsv(TT.D.nTT(1));
        TT.UI.ttLabCol{2} = hsv(TT.D.nTT(2));
        
        % Resize axis
        maxdim = max([size(TT.D.ttPos{1}),size(TT.D.ttPos{2})]);
        set(TT.UI.ttLoc, 'XLim', [0, maxdim+1], 'YLim', [0, maxdim+1])
        
        % Loop throug TT and plot tt locs
        for i_bndl = 1:2
            for i_tt = 1:TT.D.nTT(i_bndl)
                tt = TT.D.ttList{i_bndl}(i_tt);
                [x,y] = find(ismember(TT.D.ttPos{i_bndl}, tt) == 1);
                TT.UI.ttLegMrk(i_bndl,i_tt) = ...
                    plot(x , y, 'o', 'Parent', TT.UI.ttLoc(i_bndl), ...
                    'MarkerEdgeColor', TT.UI.ttLabCol{i_bndl}(i_tt,:), ...
                    'LineWidth', 2, ...
                    'MarkerSize', 15);
                text(x , y, tt, 'Parent', TT.UI.ttLoc(i_bndl), ...
                    'Color', TT.UI.ttLabCol{i_bndl}(i_tt,:), ...
                    'HorizontalAlignment', 'Center', ...
                    'FontSize', 8)
            end
        end
        
        % CREATE TT PUSH BUTTONS
        
        % Create push and radial button for each tt
        ttBtnWd = TT.UI.dfltWd/11; % width (pixel)
        ttGrpLft = [TT.UI.dfltLft+4, TT.UI.dfltLft+TT.UI.dfltWd/2]; % panels left (pixel)
        ttGrpBtm = TT.UI.bordOff+posSave(4)+TT.UI.ttPanRng+2*TT.UI.dfltSp; % panels left (pixel)
        ttBtnLft = [2, 2*ttBtnWd, 3*ttBtnWd, 4*ttBtnWd]; % objects left (pixel)
        ttBtnHt = round(TT.UI.ttBtnRng/(max(TT.D.nTT)+1) * 0.8); % hight
        ttBtnSp = round(TT.UI.ttBtnRng/(max(TT.D.nTT)+1) * 0.25); % spacing
        ttBtnBtm = linspace(TT.UI.ttBtnRng-(TT.UI.ttBtnRng/(max(TT.D.nTT)+1)), 2, max(TT.D.nTT)+1); % bottom
        ttBtnHead = [{'Hipp'}, {'MEC'}];
        % load sound icon
        sndicon = imread(fullfile(TT.PAR.imgDir, 'Icons', 'speakericon.png'));
        TT.UI.btnTT = NaN(2,max(TT.D.nTT));
        TT.UI.radSnd = NaN(2,max(TT.D.nTT),2);
        for z_bndl = 1:length(TT.D.nTT)
            left = ttGrpLft(z_bndl);
            % add bundle pannel
            panPos = [left, ttGrpBtm, TT.UI.dfltWd/2, TT.UI.ttBtnRng];
            TT.UI.panBtnTT(z_bndl) = uipanel(...
                'Parent',TT.UI.fig,...
                'Units','Pixels',...
                'BorderType','line',...
                'BorderWidth',2,...
                'FontSize',15,...
                'FontWeight','bold',...
                'HighlightColor',[0,0,0],...
                'Title',ttBtnHead{z_bndl},...
                'TitlePosition','centertop',...
                'UserData',[],...
                'Clipping','on',...
                'Position',panPos);
            
            for z_tt = 1:TT.D.nTT(z_bndl)
                % add tt button
                pos = [ttBtnLft(1), ttBtnBtm(z_tt+1), ttBtnWd*1.75, ttBtnHt];
                TT.UI.btnTT(z_bndl,z_tt) = uicontrol('style','push', ...
                    'Parent', TT.UI.panBtnTT(z_bndl), ...
                    'Enable', 'Off', ...
                    'BackgroundColor', TT.UI.btnCols(1,:), ...
                    'ForegroundColor', [1,1,1], ...
                    'String',TT.D.ttList{z_bndl}{z_tt},...
                    'Callback', {@BtnTT},...
                    'UserData', [z_bndl,z_tt,0], ... % (bundle, tt, saved)
                    'Units','Pixels', ...
                    'Position', pos, ...
                    'FontWeight','Bold',...
                    'FontSize',12);
                % add sound icon
                pos = [ttBtnLft(2), ttBtnBtm(z_tt+1), ttBtnWd, ttBtnHt];
                TT.axSndIcn(z_bndl,z_tt) = ...
                    axes('Units', 'Pixels', ...
                    'Parent', TT.UI.panBtnTT(z_bndl), ...
                    'Position', pos);
                image(sndicon)
                axis off
                axis image
                % add sound left/right radial button
                for z_sn = 1:2
                    pos = [ttBtnLft(z_sn+2), ttBtnBtm(z_tt+1), ttBtnWd, ttBtnHt];
                    TT.UI.radSnd(z_bndl,z_tt,z_sn) = uicontrol('Style','radiobutton',...
                        'Parent', TT.UI.panBtnTT(z_bndl), ...
                        'Enable', 'Off', ...
                        'String', [], ...
                        'Callback', {@RadSnd},...
                        'UserData', [z_bndl,z_tt,z_sn], ...
                        'Units', 'Pixels', ...
                        'Position', pos, ...
                        'FontWeight','Normal',...
                        'FontSize', 10,...
                        'Value',0);
                end
                
                % Plot tt track
                TT = PlotTTPath(TT,z_bndl,z_tt);
            end
        end
        
        % Disable load button
        set(TT.UI.popLoadTT, 'Enable', 'Off');
        % Enable other buttons
        x = TT.UI.btnTT(:); x(isnan(x)) = [];
        set(x, 'Enable', 'On')
        x = TT.UI.radSnd(:); x(isnan(x)) = [];
        set(x, 'Enable', 'On')
        
        % Save out handle data
        guidata(TT.UI.fig,TT)
        
    end

% --- Button press to load TT data into panel
    function BtnTT(~, ~, ~)
        % Get handle data
        TT = guidata(TT.UI.fig);
        
        % Delete old objects
        if isfield(TT.UI, 'panTT')
            % delete any open panels
            delete(TT.UI.panTT)
            % revert line and marker from past tt to normal size
            set(TT.UI.ttLegMrk(TT.UI.pstBndl,TT.UI.pstTT),'LineWidth',2)
            set(TT.UI.ttTrkLin(TT.UI.pstBndl,TT.UI.pstTT),'LineWidth',1)
        end
        
        x = get(gcbo, 'UserData');
        bndl = x(1); tt = x(2); state = x(3);
        % update past bundle and tt
        TT.UI.pstBndl = bndl; TT.UI.pstTT = tt;
        
        % plot pos parameters
        ht = ((TT.UI.ttPanRng-10)/10)*0.8; % default hight
        lf = [5, TT.UI.ttPanPos(3)/2]; % defualt left from pan
        wd = TT.UI.ttPanPos(3)/2-10; % defualt width
        btm = linspace(TT.UI.ttPanPos(4)-ht-5, 5, 10); % bottom ps vector
        
        % Define some TT specific pannel properties
        tt_lab = TT.D.ttList{bndl}{tt}; % tt label
        title = ['TT ', tt_lab]; % TT specific title for current pannel
        pancols = [0.5 0 0; 0 0.5 0]; % default pannel color (red)
        % Set color based on if tt has been updated already this session
        if state == 0
            pancol = pancols(1,:);
        else
            pancol = pancols(2,:);
        end
        
        % Set current line and marker to larger size
        set(TT.UI.ttLegMrk(bndl,tt),'LineWidth',4)
        set(TT.UI.ttTrkLin(bndl,tt),'LineWidth',4)
        
        % Pull out tt log data
        TT.D.ttind = find(ismember([TT.D.ttList{1};TT.D.ttList{2}],tt_lab));
        oldor = TT.D.logNew(1).Orientation{TT.D.ttind};
        olddepth = TT.D.logNew(1).Depth(TT.D.ttind);
        
        if strcmp(oldor,'') % for first entry
            oldor = 'Day 1';
            orvec =  TT.PAR.dirVec; % Change orientation vector
        else % change cardinal direction list
            orind = find(ismember(TT.PAR.dirVec, oldor) == 1);
            orvec = circshift(TT.PAR.dirVec, [0,-(orind-1)]);
        end
        
        % Create/define main pannel
        TT.UI.panTT = uipanel(...
            'Parent',TT.UI.fig,...
            'Units','Pixels',...
            'BorderType','line',...
            'BorderWidth',4,...
            'FontSize',15,...
            'FontWeight','bold',...
            'HighlightColor',pancol,...
            'Title',title,...
            'TitlePosition','centertop',...
            'UserData',[bndl,tt],...
            'Clipping','on',...
            'Position',TT.UI.ttPanPos);
        
        % Create enter orientation text
        ps = [lf(1), btm(2), wd, ht];
        txt = sprintf('New Screw\r\nOrientation');
        TT.UI.txt1 = uicontrol(...
            'Parent',TT.UI.panTT,...
            'Units','Pixels',...
            'FontSize',8,...
            'HorizontalAlignment','left',...
            'Position',ps,...
            'String',txt,...
            'Style','text');
        % Create enter orientation popup-menue object
        ps = [lf(2), btm(2), wd, ht];
        TT.UI.popOr = uicontrol(...
            'Parent',TT.UI.panTT,...
            'Units','Pixels',...
            'FontName','Courier New',...
            'BackgroundColor',[1 1 1],...
            'UserData',[bndl,tt],...
            'FontSize',11,...
            'Position',ps,...
            'String',orvec,...
            'Style','popupmenu',...
            'Value',1);
        
        % Create enter number of rotations text
        ps = [lf(1), btm(3), wd, ht];
        txt = sprintf('Number of Full\r\nRotations');
        TT.UI.txt2 = uicontrol(...
            'Parent',TT.UI.panTT,...
            'Units','Pixels',...
            'FontSize',8,...
            'HorizontalAlignment','left',...
            'Position',ps,...
            'String',txt,...
            'Style','text');
        % Create number of rotations popup-menue object
        ps = [lf(2), btm(3), wd, ht];
        TT.UI.popRot = uicontrol(...
            'Parent',TT.UI.panTT,...
            'Units','Pixels',...
            'FontName','Courier New',...
            'BackgroundColor',[1 1 1],...
            'UserData',[bndl,tt],...
            'FontSize',11,...
            'Position',ps,...
            'String',{'0'; '1'; '2'; '3'; '4'; '5'},...
            'Style','popupmenu',...
            'Value',1);
        
        % Create direction text
        ps = [lf(1), btm(4), wd, ht];
        txt = sprintf('TT Lowering\r\nDirection');
        TT.UI.txt3 = uicontrol(...
            'Parent',TT.UI.panTT,...
            'Units','Pixels',...
            'FontSize',8,...
            'HorizontalAlignment','left',...
            'Position',ps,...
            'String',txt,...
            'Style','text');
        % Create direction popup-menue object
        ps = [lf(2), btm(4), wd, ht];
        TT.UI.popDrc = uicontrol(...
            'Parent',TT.UI.panTT,...
            'Units','Pixels',...
            'FontName','Courier New',...
            'BackgroundColor',[1 1 1],...
            'UserData',[bndl,tt],...
            'FontSize',11,...
            'Position',ps,...
            'String',{'Down'; 'Up'},...
            'Style','popupmenu',...
            'Value',1);
        
        % Create/define notes text
        ps = [lf(1), btm(5)-15+ht, TT.UI.ttPanPos(3)-15, 15];
        txt = sprintf('Notes');
        TT.UI.txt4 = uicontrol(...
            'Parent',TT.UI.panTT,...
            'Units','Pixels',...
            'FontSize',8,...
            'HorizontalAlignment','left',...
            'Position',ps,...
            'String',txt,...
            'Style','text');
        % Create/define notes text box object
        ps = [lf(1), btm(5)-15, TT.UI.ttPanPos(3)-15, ht];
        TT.UI.txtNoteTT = uicontrol(...
            'Style','edit',...
            'Parent',TT.UI.panTT,...
            'BackgroundColor',[1 1 1],...
            'Units','Pixels',...
            'UserData',[bndl,tt],...
            'FontSize',10,...
            'Position',ps);
        
        % Create/define save TT data button object
        ps = [lf(1), btm(6)-15, TT.UI.ttPanPos(3)-15, ht];
        TT.UI.btnSaveTT = uicontrol(...
            'Parent',TT.UI.panTT,...
            'Units','Pixels',...
            'Callback',{@BtnSaveTT},...
            'UserData',[bndl,tt],...
            'FontSize',12,...
            'FontWeight','Bold',...
            'Position',ps,...
            'String',['Save TT ', tt_lab]);
        
        % Create/define bottom sub-pannel
        ps = [lf(1), btm(end), TT.UI.ttPanPos(3)-15, ht*4];
        TT.UI.spanTT = uibuttongroup(... %give structure label based on TT number
            'Parent',TT.UI.panTT,...
            'Units','Pixels',...
            'FontSize',7,...
            'HighlightColor',[0,0,0],...
            'ShadowColor',[0.5,0.5,0.5],...
            'Title',blanks(0),...
            'UserData',[bndl,tt],...
            'Clipping','off',...
            'Position',ps,...
            'SelectedObject',[],...
            'SelectionChangeFcn',[],...
            'OldSelectedObject',[]);
        
        % Create "Prior Direction & Depth" text
        ps = [lf(1)+5, btm(8)+5, TT.UI.ttPanPos(3)-25, ht];
        TT.UI.txt5 = uicontrol(...
            'Parent',TT.UI.panTT,...
            'Units','Pixels',...
            'FontSize',9,...
            'FontWeight','Bold',...
            'ForegroundColor', [1 0 0],...
            'HorizontalAlignment','Center',...
            'Position',ps,...
            'String','Prior Orientation & Depth',...
            'Style','text');
        
        % Create TT orientation text object
        ps = [lf(1)+5, btm(9)+5, TT.UI.ttPanPos(3)-25, ht];
        TT.UI.txt6 = uicontrol(...
            'Parent',TT.UI.panTT,...
            'Units','Pixels',...
            'Callback',{@directionText_Callback},...
            'FontSize',20,...
            'FontWeight','Bold',...
            'FontName','Courier New',...
            'HorizontalAlignment','center',...
            'Position',ps,...
            'String',oldor,...
            'Style','text');
        
        % Create TT depth text object
        ps = [lf(1)+5, btm(10)+5, TT.UI.ttPanPos(3)-25, ht];
        txt = sprintf('%d %sm', olddepth, char(181));
        TT.UI.txt7 = uicontrol(...
            'Parent',TT.UI.panTT,...
            'Units','Pixels',...
            'FontSize',20,...
            'FontWeight','Bold',...
            'FontName','Courier New',...
            'HorizontalAlignment','center',...
            'Position',ps,...
            'String',txt,...
            'Style','text');
        
        % Save out handle data
        guidata(TT.UI.fig,TT)
    end

% --- Button press to switch paxanos images
    function BtnSwtchImg(~, ~, ~)
        % Get handle data
        TT = guidata(TT.UI.fig);
        
        % Get user data
        shft = get(gcbo, 'UserData');
        
        % Shift image vec
        TT.PAR.imgInd = circshift(TT.PAR.imgInd,[0,shft]);
        
        % Plot new paxinos image data
        imagesc(TT.UI.atlMat{TT.PAR.imgInd(1)}, 'Parent', TT.UI.axeImg); colormap('bone');
        set(TT.UI.axeImg, 'Visible', 'Off')
        axis image
        hold on
        uistack(TT.UI.axeTTtrk,'top')
        uistack(TT.UI.ttLoc,'top')
        
        % Update image coordinates
        set(TT.UI.txtImg,'String',TT.PAR.atlFi{TT.PAR.imgInd(1)}(5:8))
        
        % Save out handle data
        guidata(TT.UI.fig,TT)
    end

% --- Button press to save tt entries
    function BtnSaveTT(~, ~, ~)
        % Get handle data
        TT = guidata(TT.UI.fig);
        
        % Update dataset
        % Orientation
        orlst = get(TT.UI.popOr,'String');
        oldor = get(TT.UI.txt6, 'String');
        newor = orlst(get(TT.UI.popOr,'Value'));
        TT.D.logNew(1).Orientation(TT.D.ttind) = newor;
        % Turns & Depth
        lst = get(TT.UI.popRot,'String');
        fullrot = str2double(lst(get(TT.UI.popRot,'Value')));
        turns = fullrot*TT.UI.trn2mm; % convert turns to mm
        % Depth
        if any(ismember(oldor, orlst))
            delta =  (find(ismember(orlst, oldor) == 1)-1) / 16;
            delta = delta * TT.UI.trn2mm * 1000; % change to microns
            delta = delta + turns; % add turns
            olddepth = TT.D.logDat(TT.D.Ses-1).Depth(TT.D.ttind);
            newdepth = delta+olddepth;
        else
            newdepth = turns * 1000; % change to microns
        end
        TT.D.logNew(1).Depth(TT.D.ttind) = newdepth;
        TT.D.logNew(1).Turns(TT.D.ttind) = fullrot;
        % Notes
        TT.D.logNew(1).Notes(TT.D.ttind) = ...
            {get(TT.UI.txtNoteTT,'String')};
        
        % Update button vars
        x = get(TT.UI.btnSaveTT, 'UserData');
        bndl = x(1); tt = x(2);
        set(TT.UI.btnTT(bndl,tt), ...
            'BackgroundColor', TT.UI.btnCols(2,:),...
            'UserData', [bndl, tt, 1])
        
        % Update pannel display
        set(TT.UI.txt6, 'String', newor);
        txt = sprintf('%d %sm', newdepth, char(181));
        set(TT.UI.txt7, 'String', txt);
        set(TT.UI.txt5, ...
            'ForegroundColor', TT.UI.btnCols(2,:),...
            'String','New Orientation & Depth');
        set(TT.UI.panTT,'HighlightColor',TT.UI.btnCols(2,:))
        
        % Update track plot
        [TT]  = PlotTTPath(TT,bndl,tt);
        
        % Save out handle data
        guidata(TT.UI.fig,TT)
    end

% --- Button press to save all tt entries
    function BtnSaveAll(~, ~, ~)
        % Get handle data
        TT = guidata(TT.UI.fig);
        
        % Overwrite first entry if first entry for this data set
        if TT.D.Ses-1 == 0
            TTL.D = TT.D.logNew;
        else
            TTL.D = [TT.D.logDat, TT.D.logNew];
        end
        TTL.P = TT.D.ttPos; % copy implant pos
        TTL.L = TT.D.ttList; % copy tt list pos
        
        % Save updated log
        save(fullfile(TT.PAR.logDir, [TT.D.ratID,'_ttl']), 'TTL')
        
        % Set user data to 1
        set(gcbo, 'UserData', 1)
        
        % Disable button
        set(TT.UI.btnSaveAll, 'Enable', 'Off')
        
        % Save out handle data
        guidata(TT.UI.fig,TT)
    end

% --- Button press to quit out of TT_TRACK
    function BtnQuit(~, ~, ~)
        % Get handle data
        TT = guidata(TT.UI.fig);
        
        if get(TT.UI.btnSaveAll, 'UserData') ~= 1
            % Construct a questdlg with two options
            % Note: based on built in function
            choice = questdlgAWL('QUIT WITHOUT SAVING?', ...
                'QUIT?', 'Yes', 'No', [], 'No', TT.UI.qstDlfPos);
            drawnow; % force update UI
            % Handle response
            switch choice
                case 'Yes'
                case 'No'
                    return
            end
        end
        
        % Close main UI
        close(TT.UI.fig)
        
    end

% Function to plot TT path
    function [TT]  = PlotTTPath(TT, bndl, tt)
        
        % Get tt data
        tt_lab = TT.D.ttList{bndl}{tt};
        ttind = find(ismember([TT.D.ttList{1};TT.D.ttList{2}],tt_lab));
        
        %         % test
        %         tmp = [0, 100, 500, 1500];
        %         for i = 1:4
        %             TT.D.logDat(i).Depth = repmat(tmp(i), sum(TT.D.nTT), 1);
        %         end
        
        % Have to use subref function to index tt values
        depths = ...
            subsref([TT.D.logDat.Depth],struct('type','()','subs',{{ttind 1:length(TT.D.logDat)}}));
        depths = depths/1000; % convert to mm
        
        % Append new depth if tt has been updated
        state = get(TT.UI.btnTT(bndl,tt), 'UserData');
        state = state(3);
        if state == 0
            newentry = false;
        else
            newentry = true;
            newdepth = TT.D.logNew(1).Depth(ttind)/1000;
            depths = [depths, newdepth];
        end
        
        % get position in bundle
        [x, z] = find(ismember(TT.D.ttPos{bndl}, tt_lab));
        % determine position relative to bundle center
        t = [x, z] - ceil(size(TT.D.ttPos{bndl})/2);
        % get x start pos with offset as a function of z pos
        x = TT.UI.xStrt(bndl) + t(1)*TT.UI.canSp + t(2)*TT.UI.linOfst;
        % align y to bundle implant pos
        y = TT.UI.yStrt(bndl);
        % get implant pos based on bundle angle
        [xa, ya] = pol2cart(TT.UI.bndAng(bndl), depths);
        % align x to bundle implant pos
        x = x + xa;
        % align y to bundle implant pos
        y = y + abs(ya);
        
        % color
        col = TT.UI.ttLabCol{bndl}(tt,:);
        % plot tt track
        TT.UI.ttTrkLin(bndl,tt) = plot(x, y, 'o-',...
            'Color', col, ...
            'MarkerEdgeColor', col, ...
            'LineWidth', 1, ...
            'MarkerSize', 3, ...
            'Parent', TT.UI.axeTTtrk);
        
        % Change end marker for new entries
        if newentry
            plot(x(end), y(end), 'o',...
                'MarkerFaceColor', col, ...
                'MarkerEdgeColor', 'k', ...
                'LineWidth', 1, ...
                'MarkerSize', 5, ...
                'Parent', TT.UI.axeTTtrk);
        end
    end

end