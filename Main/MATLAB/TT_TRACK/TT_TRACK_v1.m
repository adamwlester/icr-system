function TT_TRACK

%% ======================== SET PARAMETERS ================================

% Print that script is running
fprintf('\r\nRUNNING TT_TRACK.m\n  Time: %s\r\n', ...
    datestr(now, 'HH:MM:SS AM'))

% "TT" will be passed between all functions used
D = struct;

% Top directory
D.DIR.top = 'C:\Users\lester\MeDocuments\Research\BarnesLab\Study_ICR\ICR_Code\ICR_Running';

% IO dirs
D.DIR.ioTop = fullfile(D.DIR.top,'IOfiles');
D.DIR.log = fullfile(D.DIR.top,'IOfiles');
D.DIR.ioSS_In_All = fullfile(D.DIR.ioTop, 'SessionData', 'SS_In_All.mat'); % TEMP
% Image directory
D.DIR.img = fullfile(D.DIR.ioTop,'Images');

% Unit values
% In radians; use negative for angled toward the nose
D.UI.bndAng = [deg2rad(270), deg2rad(270-10)];
% Cannula spacing (mm)
D.UI.canSp = 0.23;
% Turn to mm conversion
D.UI.trn2mm = 0.32;
% Track lines offset (mm)
D.UI.linOfst = 0.025;

% Colors
D.UI.btnCols = [0.75 0 0; 0 0.75 0]; % color

% Get image list
D.PAR.atlFi = dir(fullfile(D.DIR.img, 'Paxinos'));
D.PAR.atlFi = {D.PAR.atlFi(3:end-1).name};

%==========================================================================

%% ======================== SETUP UI FIGURE ===============================

% Load session data
T = load(D.DIR.ioSS_In_All);
D.SS_In_All = T.SS_In_All;

% Get rat list
ind = D.SS_In_All.Include_Run & ...
    D.SS_In_All.Implanted;
D.PAR.ratList = D.SS_In_All.Properties.RowNames(ind);
D.PAR.ratList = regexprep(D.PAR.ratList, 'r', '');
D.PAR.ratList = [{'Select Rat'};D.PAR.ratList];

% Import paxinos images
for z_atl = 1:length(D.PAR.atlFi)
    
    % Store
    D.UI.atlMat{z_atl} = ...
        imread(fullfile(D.DIR.img, 'Paxinos', D.PAR.atlFi{z_atl}));
    
    % Reseize image to 1pxl per 10 um
    D.UI.atlMat{z_atl} = imresize(D.UI.atlMat{z_atl}, [1200,1200]);
end

% Border offset for all GUI features
D.UI.bordOff = 20; % pixels
sc = get(0,'MonitorPositions');
sc1 = sc(1,:);
sc2 = sc(2,:);
D.UI.qstDlfPos = [sc1(3) + sc2(3)/2, sc2(4)/2]; % questions dialogue pos

% Main figure
D.UI.figPos = [0 0 980 800];
D.UI.fig = figure(...
    'Units','Pixels',...
    'Position',D.UI.figPos,...
    'Color', [1 1 1],...
    'Name','TT Track',...
    'Tag','figure1',...
    'MenuBar', 'none',... % hide menu
    'Visible','off'); % hide figure durring creation
movegui('center')
% Make sure that closeGUI_Callback is ran if window is closed
% set(D.UI.fig,'CloseRequestFcn',@closeGUI_Callback)

% Axis for plotting Paxinos image
D.UI.axePos = ...
    [D.UI.bordOff, D.UI.bordOff, D.UI.figPos(4)-2*D.UI.bordOff, D.UI.figPos(4)-2*D.UI.bordOff];
D.UI.axeImg = axes(...
    'Parent', D.UI.fig,...
    'Units','Pixels',...
    'Position',D.UI.axePos,...
    'XTick', [], ...
    'YTick', [], ...
    'Visible', 'off');
D.UI.axeTTtrk = axes(...
    'Parent', D.UI.fig,...
    'Units','Pixels',...
    'Position',D.UI.axePos,...
    'XLim', [0,12], ...
    'YLim', [0,12], ...
    'XTick', 0:12, ...
    'YTick', 0:12, ...
    'YDir', 'Reverse', ...
    'Color', 'None', ...
    'Visible', 'on');
hold on
box on
grid on

% Create Hipp legend axis
wdht = 125; % width/hight of axis
leg_pos = [D.UI.axePos(1)+D.UI.bordOff/2, D.UI.axePos(2)+D.UI.bordOff/2, wdht, wdht];
D.UI.axLeg(1) = axes(...
    'Parent', D.UI.fig,...
    'Units','pixels',...
    'Position', leg_pos,...
    'Color', [1 1 1],...
    'XTick', [], ...
    'YTick', [], ...
    'Visible', 'on');
set(D.UI.axLeg(1), 'Title', ...
    text('String','Hipp Bundle','FontSize',15,'FontWeight','bold','Color','k'))
box on
hold on
% Create MEX legend axis
leg_pos = [sum(leg_pos([1,3]))+D.UI.bordOff/2, leg_pos(2), leg_pos(3), leg_pos(4)];
D.UI.axLeg(2) = axes(...
    'Parent', D.UI.fig,...
    'Units','pixels',...
    'Position', leg_pos,...
    'Color', [1 1 1],...
    'XTick', [], ...
    'YTick', [], ...
    'Visible', 'on');
set(D.UI.axLeg(2), 'Title', ...
    text('String','MEC Bundle','FontSize',15,'FontWeight','bold','Color','k'))
box on
hold on

% Orientation strings
D.PAR.dirVec = [{'N'},{'NNE'},{'NE'},{'ENE'},{'E'},{'ESE'},{'SE'},{'SSE'},{'S'},...
    {'SSW'},{'SW'},{'WSW'},{'W'},{'WNW'},{'NW'},{'NNW'}];

% Will keep track of current desplayed image
D.PAR.imgInd = [1:length(D.PAR.atlFi)]; 

% Plot imported image data
imagesc(D.UI.atlMat{1}, 'Parent', D.UI.axeImg); colormap('bone');
set(D.UI.axeImg, 'Visible', 'Off')
axis image
hold on
uistack(D.UI.axeTTtrk,'top')
uistack(D.UI.axLeg,'top')

% TEMP
Setup3dPlot();

%==========================================================================

%% ======================= SETUP UI OBJECTS ===============================

% Position defaults
D.UI.dfltLft = sum(D.UI.axePos([1,3]))+D.UI.bordOff; % default left pos
D.UI.dfltWd = D.UI.figPos(3)-D.UI.dfltLft-D.UI.bordOff; % default width pos
D.UI.dfltHt = 40; % default width pos
D.UI.dfltSp = 20; % spacing

% Switch image button
% back
pos = [sum(D.UI.axePos([1,3]))-50*3-D.UI.bordOff/2, sum(D.UI.axePos([2,4]))-D.UI.bordOff/2-25, 50, 25];
D.UI.btnSwtchImg(1) = uicontrol('style','push', ...
    'Parent', D.UI.fig, ...
    'Enable', 'On', ...
    'String',char(220),...
    'Callback', {@BtnSwtchImg},...
    'UserData', 1, ...
    'Value', 0, ...
    'Units','Pixels', ...
    'Position', pos, ...
    'FontWeight','Bold',...
    'FontName','Symbol',...
    'FontSize',30);
% text
pos = [pos(1)+pos(3), pos(2), pos(3), pos(4)];
D.UI.txtImg = uicontrol('Style','text', ...
    'Parent',D.UI.fig, ...
    'String',D.PAR.atlFi{1}(5:8), ...
    'Units','Pixels', ...
    'Position', pos, ...
    'HorizontalAlignment', 'Center',...
    'BackgroundColor', [0,0,0], ...
    'ForegroundColor', [1,1,1], ...
    'FontWeight','Bold',...
    'FontName','MS Sans Serif',...
    'FontSize', 14);
% forward
pos = [pos(1)+pos(3), pos(2), pos(3), pos(4)];
D.UI.btnSwtchImg(1) = uicontrol('style','push', ...
    'Parent', D.UI.fig, ...
    'Enable', 'On', ...
    'String',char(222),...
    'Callback', {@BtnSwtchImg},...
    'UserData', -1, ...
    'Value', 0, ...
    'Units','Pixels', ...
    'Position', pos, ...
    'FontWeight','Bold',...
    'FontName','Symbol',...
    'FontSize',30);

% Load popup
posLoad = [D.UI.dfltLft, D.UI.figPos(4)-D.UI.bordOff-D.UI.dfltHt, D.UI.dfltWd, D.UI.dfltHt];
D.UI.popLoadTT = uicontrol('Style','popupmenu', ...
    'Parent', D.UI.fig, ...
    'Enable', 'On', ...
    'String',D.PAR.ratList,...
    'Callback', {@PopLoadTT},...
    'FontName','Courier New',...
    'UserData', 1, ...
    'Units','Pixels', ...
    'Position', posLoad, ...
    'FontWeight','Bold',...
    'FontSize',14);

% Save button
posSave = [D.UI.dfltLft, D.UI.bordOff, D.UI.dfltWd/2-5, D.UI.dfltHt];
D.UI.btnSaveAll = uicontrol('style','push', ...
    'Parent', D.UI.fig, ...
    'Enable', 'On', ...
    'String','SAVE',...
    'Callback', {@BtnSaveAll},...
    'UserData', 0, ...
    'Units','Pixels', ...
    'Position', posSave, ...
    'FontWeight','Bold',...
    'FontSize',14);

% Quit button
posQuit = [D.UI.dfltLft+D.UI.dfltWd/2+5, D.UI.bordOff, D.UI.dfltWd/2-5, D.UI.dfltHt];
D.UI.btnQuit = uicontrol('style','push', ...
    'Parent', D.UI.fig, ...
    'Enable', 'On', ...
    'String','QUIT',...
    'Callback', {@BtnQuit},...
    'UserData', 0, ...
    'Units','Pixels', ...
    'Position', posQuit, ...
    'FontWeight','Bold',...
    'FontSize',14);

% area for tt buttons
D.UI.ttBtnRng = (D.UI.figPos(4) - posLoad(4) - posSave(4) - D.UI.dfltSp*3 - 2*D.UI.bordOff) * 0.4;
% area for tt pannel
D.UI.ttPanRng = (D.UI.figPos(4) - posLoad(4) - posSave(4) - D.UI.dfltSp*3 - 2*D.UI.bordOff) * 0.6;
D.UI.ttPanPos = [D.UI.dfltLft, D.UI.bordOff+posSave(4)+D.UI.dfltSp, D.UI.dfltWd, D.UI.ttPanRng];

% Store main GUI data and show figure
set(D.UI.fig,'Visible','On')

%==========================================================================

%% ====================== GRAPHICS FUNCTIONS ==============================

% ----------------------------- SETUP 3D PLOT -----------------------------
    function []  = Setup3dPlot()
        
        D.UI.axe3D = axes(...
            'Parent', D.UI.fig,...
            'Units','Pixels',...
            'Position',D.UI.axePos,...
            'XLim', [0,1200], ...
            'YLim', [0,1200], ...
            'ZLim', [0,1200], ...
            'XTick', 0:12, ...
            'YTick', 0:12, ...
            'ZTick', 0:12, ...
            'YDir', 'Reverse', ...
            'Color', 'None', ...
            'Visible', 'on');
        hold on
        box on
        grid on
        
        
        
    end

% ----------------------------- PLOT TT PATHS -----------------------------
    function []  = PlotTTPath(bndl, tt)
        
        % Get tt data
        tt_fld = D.D.ttFlds{bndl}{tt};
        
        % TEMP
        D.D.ttLogStruct(D.D.Ses).Depth.(tt_fld) = D.D.ttLogStruct(D.D.Ses-1).Depth.(tt_fld) + 500;
        
        % Pull out all depths for this tt
        depths_all = [D.D.ttLogStruct.Depth];
        depths_all = [depths_all(1:end-1).(tt_fld)];
        depths_all = depths_all/1000; % convert to mm
        
        % Append new depth if tt has been updated
        state = get(D.UI.h_btnTT(bndl,tt), 'UserData');
        state = state(3);
        if state == 0
            newentry = false;
        else
            newentry = true;
            depths_new = D.D.ttLogStruct(D.D.Ses).Depth.(tt_fld)/1000;
            depths_all = [depths_all, depths_new];
        end
        
        % Get position in bundle
        [x, z] = find(ismember(D.D.ttMap{bndl}, tt_fld));
        
        % Determine position relative to bundle center
        t = [x, z] - ceil(size(D.D.ttMap{bndl})/2);
        
        % Get x start pos with offset as a function of z pos
        x = D.D.ttCoords{bndl}(1) + t(1)*D.UI.canSp + t(2)*D.UI.linOfst;
        
        % Align y to bundle implant pos
        y = D.D.ttCoords{bndl}(3);
        
        % Get implant pos based on bundle angle
        [xa, ya] = pol2cart(D.UI.bndAng(bndl), depths_all);
        
        % Align x and y to bundle implant pos
        x = x + xa;
        y = y + abs(ya);
        
        % color
        col = D.UI.ttLabCol{bndl}(tt,:);
        % plot tt track
        D.UI.ttTrkLin(bndl,tt) = plot(x, y, 'o-',...
            'Color', col, ...
            'MarkerEdgeColor', col, ...
            'LineWidth', 1, ...
            'MarkerSize', 3, ...
            'Parent', D.UI.axeTTtrk);
        
        % Change end marker for new entries
        if newentry
            plot(x(end), y(end), 'o',...
                'MarkerFaceColor', col, ...
                'MarkerEdgeColor', 'k', ...
                'LineWidth', 1, ...
                'MarkerSize', 5, ...
                'Parent', D.UI.axeTTtrk);
        end
    end

%==========================================================================

%% ====================== CALLBACK FUNCTIONS ==============================

% ----------------------- LOAD ALL PREVEOUS TT DATA -----------------------
    function PopLoadTT(~, ~, ~)
        
        % Get rat number as string
        D.D.ratID = D.PAR.ratList{get(gcbo, 'Value')};
        
        % Get Rat label
        D.PAR.ratLab = ... % ('r####')
            ['r',D.D.ratID(1:4)];
        
        % Get rat index in D.SS_In_All
        D.D.ratInd = ...
            find(ismember(D.SS_In_All.Properties.RowNames, D.PAR.ratLab));
        
        % Get implant coordinates
        D.D.ttCoords = D.SS_In_All.Implant_Coordinates(D.D.ratInd,:);
        
        % Get tt configs
        D.D.ttConfig = D.SS_In_All.Implant_Configuration(D.D.ratInd,:);
        
        % Get tt map
        D.D.ttMap = D.SS_In_All.Tetrode_Mapping(D.D.ratInd,:);
        
        % Remove unused entries
        D.D.ttMap{1} = D.D.ttMap{1}(1:D.D.ttConfig{1}(1),1:D.D.ttConfig{1}(2));
        D.D.ttMap{2} = D.D.ttMap{2}(1:D.D.ttConfig{2}(1),1:D.D.ttConfig{2}(2));
        
        % Store current log
        D.D.ttLogStruct = D.SS_In_All.Turn_Log{D.D.ratInd};
        
        % Get session number
        D.D.Ses = size(D.D.ttLogStruct,1)+1;
        
        % Set first ses flag
        D.D.isFirstSes = D.D.Ses == 2;
        
        % Set first entry depths to zero
        if D.D.isFirstSes
            flds = fieldnames(D.D.ttLogStruct(1).Depth);
            for z_f = 1:length(flds)
                D.D.ttLogStruct(1).Depth.(flds{z_f}) = 0;
            end
        end
        % Add new row
        D.D.ttLogStruct = [D.D.ttLogStruct; D.D.ttLogStruct(end)];
        D.D.logNew = D.D.ttLogStruct(end);
        
        % Add new ses and date
        D.D.logNew.Date = datestr(clock, 'yyyy-mm-dd_HH-MM-SS', 'local');
        
        % Store tt fields
        D.D.ttFlds{1} = cellstr(char(D.D.ttMap{1}(~isundefined(D.D.ttMap{1}))));
        D.D.ttFlds{2} =  cellstr(char(D.D.ttMap{2}(~isundefined(D.D.ttMap{2}))));
        
        % Sort tt fields
        D.D.ttFlds{1} = sort(D.D.ttFlds{1});
        D.D.ttFlds{2} = sort(D.D.ttFlds{2});
        
        % Remove 'TT'
        D.D.ttLabs{1} = regexprep(D.D.ttFlds{1}, 'TT', '');
        D.D.ttLabs{2} = regexprep(D.D.ttFlds{2}, 'TT', '');
        
        % Get number of tts in each bundle
        D.D.nTT = [length(D.D.ttFlds{1}), length(D.D.ttFlds{2})];
        
        % PLOT TT LOCS
        
        % Tetrode colors locations
        D.UI.ttLabCol{1} = hsv(D.D.nTT(1));
        D.UI.ttLabCol{2} = hsv(D.D.nTT(2));
        
        % Resize axis
        center = (max([size(D.D.ttMap{2}),size(D.D.ttMap{1})]) + 0.5)/2;
        
        % Loop throug TT and plot tt locs
        for z_bndl = 1:2
            
            % Set axis lims
            set(D.UI.axLeg(z_bndl), ...
                'XLim', [D.D.ttConfig{z_bndl}(1)/2 - center+ 0.5, D.D.ttConfig{z_bndl}(1)/2 + center + 0.5], ...
                'YLim', [D.D.ttConfig{z_bndl}(2)/2 - center+ 0.5, D.D.ttConfig{z_bndl}(2)/2 + center + 0.5])
            
            for z_tt = 1:D.D.nTT
                
                % Find position of next tt
                tt_fld = D.D.ttFlds{z_bndl}(z_tt);
                [x,y] = find(ismember(D.D.ttMap{z_bndl}, tt_fld) == 1);
                
                % Bail if not found
                if isempty(x) || isempty(y)
                    continue
                end
                
                % Plot tt marker
                D.UI.ttLegMrk(z_bndl,z_tt) = ...
                    plot(x , y, 'o', 'Parent', D.UI.axLeg(z_bndl), ...
                    'MarkerEdgeColor', D.UI.ttLabCol{z_bndl}(z_tt,:), ...
                    'LineWidth', 2, ...
                    'MarkerSize', 15);
                text(x , y, D.D.ttLabs{z_bndl}{z_tt}, 'Parent', D.UI.axLeg(z_bndl), ...
                    'Color', D.UI.ttLabCol{z_bndl}(z_tt,:), ...
                    'HorizontalAlignment', 'Center', ...
                    'FontSize', 8)
            end
        end
        
        % CREATE TT PUSH BUTTONS
        
        % Position settings
        
        % button width (pixel)
        ttBtnWd = D.UI.dfltWd/11;
        % panels left (pixel)
        ttGrpLft = [D.UI.dfltLft+4, D.UI.dfltLft+D.UI.dfltWd/2];
        % panels bottom (pixel)
        ttGrpBtm = D.UI.bordOff+posSave(4)+D.UI.ttPanRng+2*D.UI.dfltSp;
        % button left (pixel)
        ttBtnLft = [2, 2*ttBtnWd, 3*ttBtnWd, 4*ttBtnWd];
        % button hight
        ttBtnHt = round(D.UI.ttBtnRng/(max(D.D.nTT)+1) * 0.8);
        % button bottom
        ttBtnBtm = linspace(D.UI.ttBtnRng-(D.UI.ttBtnRng/(max(D.D.nTT)+1)), 2, max(D.D.nTT)+1);
        % bundle heading
        ttBtnHead = [{'Hipp'}, {'MEC'}];
        
        
        % Load sound icon
        sndicon = imread(fullfile(D.DIR.img, 'Icons', 'speakericon.png'));
        
        % Create hangle array
        D.UI.h_btnTT = gobjects(2,max(D.D.nTT));
        D.UI.h_radSnd = gobjects(2,max(D.D.nTT),2);
        
        % Loop through each bundle
        for z_bndl = 1:length(D.D.nTT)
            left = ttGrpLft(z_bndl);
            
            % Add bundle pannel
            panPos = [left, ttGrpBtm, D.UI.dfltWd/2, D.UI.ttBtnRng];
            D.UI.panBtnTT(z_bndl) = uipanel(...
                'Parent',D.UI.fig,...
                'Units','Pixels',...
                'BorderType','line',...
                'BorderWidth',2,...
                'FontSize',15,...
                'FontWeight','bold',...
                'HighlightColor',[0,0,0],...
                'Title',ttBtnHead{z_bndl},...
                'TitlePosition','centertop',...
                'UserData',[],...
                'Clipping','on',...
                'Position',panPos);
            
            for z_tt = 1:D.D.nTT(z_bndl)
                
                % Add tt button
                pos = [ttBtnLft(1), ttBtnBtm(z_tt+1), ttBtnWd*1.75, ttBtnHt];
                D.UI.h_btnTT(z_bndl,z_tt) = uicontrol('style','push', ...
                    'Parent', D.UI.panBtnTT(z_bndl), ...
                    'Enable', 'Off', ...
                    'BackgroundColor', D.UI.btnCols(1,:), ...
                    'ForegroundColor', [1,1,1], ...
                    'String',D.D.ttLabs{z_bndl}{z_tt},...
                    'Callback', {@BtnTT},...
                    'UserData', [z_bndl,z_tt,0], ... % (bundle, tt, saved)
                    'Units','Pixels', ...
                    'Position', pos, ...
                    'FontWeight','Bold',...
                    'FontSize',12);
                
                % Add sound icon
                pos = [ttBtnLft(2), ttBtnBtm(z_tt+1), ttBtnWd, ttBtnHt];
                D.axSndIcn(z_bndl,z_tt) = ...
                    axes('Units', 'Pixels', ...
                    'Parent', D.UI.panBtnTT(z_bndl), ...
                    'Position', pos);
                image(sndicon)
                axis off
                axis image
                
                % Add sound left/right radial button
                for z_sn = 1:2
                    pos = [ttBtnLft(z_sn+2), ttBtnBtm(z_tt+1), ttBtnWd, ttBtnHt];
                    D.UI.h_radSnd(z_bndl,z_tt,z_sn) = uicontrol('Style','radiobutton',...
                        'Parent', D.UI.panBtnTT(z_bndl), ...
                        'Enable', 'Off', ...
                        'String', [], ...
                        'Callback', {@RadSnd},...
                        'UserData', [z_bndl,z_tt,z_sn], ...
                        'Units', 'Pixels', ...
                        'Position', pos, ...
                        'FontWeight','Normal',...
                        'FontSize', 10,...
                        'Value',0);
                end
                
                % Plot tt track
                PlotTTPath(z_bndl, z_tt);
            end
        end
        
        % Disable load button
        set(D.UI.popLoadTT, 'Enable', 'Off');
        
        % Enable other buttons
        set(D.UI.h_btnTT(isgraphics(D.UI.h_btnTT)), 'Enable', 'On')
        set(D.UI.h_radSnd(isgraphics(D.UI.h_radSnd)), 'Enable', 'On')
        
    end

% ---------------- BUTTON PRESS TO LOAD TT DATA INTO PANEL ----------------
    function BtnTT(~, ~, ~)
        
        % Delete old objects
        if isfield(D.UI, 'panTT')
            
            % Delete any open panels
            delete(D.UI.panTT)
            
            % Revert line and marker from past tt to normal size
            set(D.UI.ttLegMrk(D.UI.pstBndl,D.UI.pstTT),'LineWidth',2)
            set(D.UI.ttTrkLin(D.UI.pstBndl,D.UI.pstTT),'LineWidth',1)
            
        end
        
        % Get stored values
        x = get(gcbo, 'UserData');
        bndl = x(1);
        tt = x(2);
        state = x(3);
        
        % Get tt field
        D.D.ttFldNow = D.D.ttFlds{bndl}{tt};
        
        % Get tt index
        D.D.ttIndNow = find(ismember([D.D.ttFlds{1};D.D.ttFlds{2}],D.D.ttFldNow));
        
        % Update past bundle and tt
        D.UI.pstBndl = bndl;
        D.UI.pstTT = tt;
        
        % Plot default hight
        ht = ((D.UI.ttPanRng-10)/10)*0.8;
        % Plot defualt left from pan
        lf = [5, D.UI.ttPanPos(3)/2];
        % Plot defualt width
        wd = D.UI.ttPanPos(3)/2-10;
        % Plot default bottom ps vector
        btm = linspace(D.UI.ttPanPos(4)-ht-5, 5, 10);
        
        % Panel color states [red, green]
        pancols = [0.5 0 0; 0 0.5 0];
        % Panel current color based on if tt has been updated already this session
        pancol = pancols(state+1,:);
        
        % Set current line and marker to larger size
        set(D.UI.ttLegMrk(bndl,tt),'LineWidth',4)
        set(D.UI.ttTrkLin(bndl,tt),'LineWidth',4)
        
        % Get last orientation
        orientations_last = D.D.ttLogStruct(D.D.Ses).Orientation.(D.D.ttFldNow);
        
        % Handle first ses
        if isundefined(orientations_last)
            
            % Set to specific string
            orientations_last = 'Day 1';
            
            % Change orientation vector
            orvec =  D.PAR.dirVec;
            
        else
            
            % Change to string
            orientations_last = char(orientations_last);
            
            % change cardinal direction list
            orind = find(ismember(D.PAR.dirVec, orientations_last) == 1);
            orvec = circshift(D.PAR.dirVec, [0,-(orind-1)]);
        end
        
        % Get last depth
        depths_last = D.D.ttLogStruct(D.D.Ses).Depth.(D.D.ttFldNow);
        
        % Create/define main pannel
        D.UI.panTT = uipanel(...
            'Parent',D.UI.fig,...
            'Units','Pixels',...
            'BorderType','line',...
            'BorderWidth',4,...
            'FontSize',15,...
            'FontWeight','bold',...
            'HighlightColor',pancol,...
            'Title',D.D.ttFldNow,...
            'TitlePosition','centertop',...
            'UserData',[bndl,tt],...
            'Clipping','on',...
            'Position',D.UI.ttPanPos);
        
        % Create enter orientation text
        ps = [lf(1), btm(2), wd, ht];
        txt = sprintf('New Screw\r\nOrientation');
        D.UI.txt1 = uicontrol(...
            'Parent',D.UI.panTT,...
            'Units','Pixels',...
            'FontSize',8,...
            'HorizontalAlignment','left',...
            'Position',ps,...
            'String',txt,...
            'Style','text');
        % Create enter orientation popup-menue object
        ps = [lf(2), btm(2), wd, ht];
        D.UI.popOr = uicontrol(...
            'Parent',D.UI.panTT,...
            'Units','Pixels',...
            'FontName','Courier New',...
            'BackgroundColor',[1 1 1],...
            'UserData',[bndl,tt],...
            'FontSize',11,...
            'Position',ps,...
            'String',orvec,...
            'Style','popupmenu',...
            'Value',1);
        
        % Create enter number of rotations text
        ps = [lf(1), btm(3), wd, ht];
        txt = sprintf('Number of\r\nFull Turns');
        D.UI.txt2 = uicontrol(...
            'Parent',D.UI.panTT,...
            'Units','Pixels',...
            'FontSize',8,...
            'HorizontalAlignment','left',...
            'Position',ps,...
            'String',txt,...
            'Style','text');
        % Create number of rotations popup-menue object
        ps = [lf(2), btm(3), wd, ht];
        D.UI.popRot = uicontrol(...
            'Parent',D.UI.panTT,...
            'Units','Pixels',...
            'FontName','Courier New',...
            'BackgroundColor',[1 1 1],...
            'UserData',[bndl,tt],...
            'FontSize',11,...
            'Position',ps,...
            'String',{'0'; '1'; '2'; '3'; '4'; '5'},...
            'Style','popupmenu',...
            'Value',1);
        
        % Create direction text
        ps = [lf(1), btm(4), wd, ht];
        txt = sprintf('TT Lowering\r\nDirection');
        D.UI.txt3 = uicontrol(...
            'Parent',D.UI.panTT,...
            'Units','Pixels',...
            'FontSize',8,...
            'HorizontalAlignment','left',...
            'Position',ps,...
            'String',txt,...
            'Style','text');
        % Create direction popup-menue object
        ps = [lf(2), btm(4), wd, ht];
        D.UI.popDrc = uicontrol(...
            'Parent',D.UI.panTT,...
            'Units','Pixels',...
            'FontName','Courier New',...
            'BackgroundColor',[1 1 1],...
            'UserData',[bndl,tt],...
            'FontSize',11,...
            'Position',ps,...
            'String',{'Down'; 'Up'},...
            'Style','popupmenu',...
            'Value',1);
        
        % Create/define notes text
        ps = [lf(1), btm(5)-15+ht, D.UI.ttPanPos(3)-15, 15];
        txt = sprintf('Notes');
        D.UI.txt4 = uicontrol(...
            'Parent',D.UI.panTT,...
            'Units','Pixels',...
            'FontSize',8,...
            'HorizontalAlignment','left',...
            'Position',ps,...
            'String',txt,...
            'Style','text');
        % Create/define notes text box object
        ps = [lf(1), btm(5)-15, D.UI.ttPanPos(3)-15, ht];
        D.UI.txtNoteTT = uicontrol(...
            'Style','edit',...
            'Parent',D.UI.panTT,...
            'BackgroundColor',[1 1 1],...
            'Units','Pixels',...
            'UserData',[bndl,tt],...
            'FontSize',10,...
            'Position',ps);
        
        % Create/define save TT data button object
        ps = [lf(1), btm(6)-15, D.UI.ttPanPos(3)-15, ht];
        D.UI.btnSaveTT = uicontrol(...
            'Parent',D.UI.panTT,...
            'Units','Pixels',...
            'Callback',{@BtnSaveTT},...
            'UserData',[bndl,tt],...
            'FontSize',12,...
            'FontWeight','Bold',...
            'Position',ps,...
            'String',['Save ', D.D.ttFldNow]);
        
        % Create/define bottom sub-pannel
        ps = [lf(1), btm(end), D.UI.ttPanPos(3)-15, ht*4];
        D.UI.spanTT = uibuttongroup(... %give structure label based on TT number
            'Parent',D.UI.panTT,...
            'Units','Pixels',...
            'FontSize',7,...
            'HighlightColor',[0,0,0],...
            'ShadowColor',[0.5,0.5,0.5],...
            'Title',blanks(0),...
            'UserData',[bndl,tt],...
            'Clipping','off',...
            'Position',ps,...
            'SelectedObject',[],...
            'SelectionChangeFcn',[],...
            'OldSelectedObject',[]);
        
        % Create "Prior Direction & Depth" text
        ps = [lf(1)+5, btm(8)+5, D.UI.ttPanPos(3)-25, ht];
        D.UI.txt5 = uicontrol(...
            'Parent',D.UI.panTT,...
            'Units','Pixels',...
            'FontSize',9,...
            'FontWeight','Bold',...
            'ForegroundColor', [1 0 0],...
            'HorizontalAlignment','Center',...
            'Position',ps,...
            'String','Prior Orientation & Depth',...
            'Style','text');
        
        % Create TT orientation text object
        ps = [lf(1)+5, btm(9)+5, D.UI.ttPanPos(3)-25, ht];
        D.UI.txt6 = uicontrol(...
            'Parent',D.UI.panTT,...
            'Units','Pixels',...
            'Callback',{@directionText_Callback},...
            'FontSize',20,...
            'FontWeight','Bold',...
            'FontName','Courier New',...
            'HorizontalAlignment','center',...
            'Position',ps,...
            'String',orientations_last,...
            'Style','text');
        
        % Create TT depth text object
        ps = [lf(1)+5, btm(10)+5, D.UI.ttPanPos(3)-25, ht];
        txt = sprintf('%d %sm', depths_last, char(181));
        D.UI.txt7 = uicontrol(...
            'Parent',D.UI.panTT,...
            'Units','Pixels',...
            'FontSize',20,...
            'FontWeight','Bold',...
            'FontName','Courier New',...
            'HorizontalAlignment','center',...
            'Position',ps,...
            'String',txt,...
            'Style','text');
        
    end

% ----------------- BUTTON PRESS TO SWITCH PAXANOS IMAGES -----------------
    function BtnSwtchImg(~, ~, ~)
        
        % Get user data
        shft = get(gcbo, 'UserData');
        
        % Shift image vec
        D.PAR.imgInd = circshift(D.PAR.imgInd,[0,shft]);
        
        % Plot new paxinos image data
        imagesc(D.UI.atlMat{D.PAR.imgInd(1)}, 'Parent', D.UI.axeImg); colormap('bone');
        set(D.UI.axeImg, 'Visible', 'Off')
        axis image
        hold on
        uistack(D.UI.axeTTtrk,'top')
        uistack(D.UI.axLeg,'top')
        
        % Update image coordinates
        set(D.UI.txtImg,'String',D.PAR.atlFi{D.PAR.imgInd(1)}(5:8))
        
    end

% -------------------- BUTTON PRESS TO SAVE TT ENTRIES --------------------
    function BtnSaveTT(~, ~, ~)
        
        % Update Orientation
        orlst = get(D.UI.popOr,'String');
        orientations_last = get(D.UI.txt6, 'String');
        newor = orlst(get(D.UI.popOr,'Value'));
        D.D.ttLogStruct(D.D.Ses).Orientation.(D.D.ttFldNow) = newor;
        
        % Get turns info
        lst = get(D.UI.popRot,'String');
        fullrot = str2double(lst(get(D.UI.popRot,'Value')));
        turns = fullrot*D.UI.trn2mm; % convert turns to mm
        
        % Update Depth
        if any(ismember(orientations_last, orlst))
            delta =  (find(ismember(orlst, orientations_last) == 1)-1) / 16;
            delta = delta * D.UI.trn2mm * 1000; % change to microns
            delta = delta + turns; % add turns
            depths_last = D.D.ttLogStruct(D.D.Ses-1).Depth.(D.D.ttFldNow);
            newdepth = delta+depths_last;
        else
            newdepth = turns * 1000; % change to microns
        end
        D.D.ttLogStruct(D.D.Ses).Depth.(D.D.ttFldNow) = newdepth;
        
        % Format new note
        new_note_str = sprintf('%s%s: %s\r\n', ...
            D.D.ttLogStruct(D.D.Ses).Notes, ...
            D.D.ttFldNow, ...
            get(D.UI.txtNoteTT,'String'));
        
        % Update Notes
        D.D.ttLogStruct(D.D.Ses).Notes = new_note_str;
        
        % Update button vars
        x = get(D.UI.btnSaveTT, 'UserData');
        bndl = x(1); tt = x(2);
        set(D.UI.h_btnTT(bndl,tt), ...
            'BackgroundColor', D.UI.btnCols(2,:),...
            'UserData', [bndl, tt, 1])
        
        % Update pannel display
        set(D.UI.txt6, 'String', newor);
        txt = sprintf('%d %sm', newdepth, char(181));
        set(D.UI.txt7, 'String', txt);
        set(D.UI.txt5, ...
            'ForegroundColor', D.UI.btnCols(2,:),...
            'String','New Orientation & Depth');
        set(D.UI.panTT,'HighlightColor',D.UI.btnCols(2,:))
        
        % Update track plot
        PlotTTPath(bndl,tt);
        
    end

% ------------------ BUTTON PRESS TO SAVE ALL TT ENTRIES ------------------
    function BtnSaveAll(~, ~, ~)
        
        % Save back to table
        D.SS_In_All.Turn_Log{D.D.ratInd} = D.D.ttLogStruct;
        
        % Save out data
        SS_In_All = D.SS_In_All; %#ok<NASGU>
        save(D.DIR.ioSS_In_All, 'SS_In_All');
        
        % Set user data to 1
        set(gcbo, 'UserData', 1)
        
        % Disable button
        set(D.UI.btnSaveAll, 'Enable', 'Off')
        
    end

% ------------------ BUTTON PRESS TO QUIT OUT OF TT_TRACK -----------------
    function BtnQuit(~, ~, ~)
        
        % Display warning if save not done
        if get(D.UI.btnSaveAll, 'UserData') ~= 1
            
            % Construct a questdlg with two options
            choice = dlgAWL('!!WARNING: QUIT WITHOUT SAVING?!!', ...
                    'ABBORT RUN', ...
                    'Yes', 'No', [], 'No', ...
                    D.UI.qstDlfPos, ...
                    'Warn');
                
            drawnow; % force update UI
            % Handle response
            switch choice
                case 'Yes'
                case 'No'
                    return
            end
        end
        
        % Close main UI
        close(D.UI.fig)
        
    end

%==========================================================================

end