<VisualMicro>
  <Program Name="FeederDue" Ext=".ino" Location="C:\Users\lester\MeDocuments\Research\BarnesLab\Study_ICR\Code\Arduino\FeederDue">
    <Compile IsDebugStart="1" CompilerErrors="0" ConfigurationName="Debug" StopOnError="False" OptimiseLibs="True" OptimiseCore="True" BuildPath="C:\Users\lester\AppData\Local\Temp\VMicroBuilds\FeederDue\arduino_due_x" ReCompileIfSourceIsNewer="1" IsGdb="0" SketchName="FeederDue" ReportDigitalPins="0" ReportAnalogPins="0" ReportI2C="0" ReportFreeMemory="0" IncludeDebug="1" LastDebugPreProcessorDefinitions="VM_DEBUG;VM_DEBUG_ENABLE 1;VM_DEBUG_BANDWIDTH_THROTTLE_MS 25;VM_DEBUGGER_TYPE_HARDWARESERIAL 0;VM_DEBUGGER_TYPE_SOFTWARESERIAL 1;VM_DEBUGGER_TYPE_FASTSERIAL 2;VM_DEBUGGER_TYPE_USB 3;VM_DEBUGGER_TYPE_TEENSY 4;VM_DEBUGGER_TYPE_UART 5;VM_DEBUGGER_TYPE_USART 6;VM_DEBUGGER_TYPE_USBSERIAL 7;VM_DEBUGGER_TYPE_TTYUART 8;VM_DEBUGGER_TYPE_NET_CONSOLE 9;VM_DEBUGGER_TYPE_Uart 10;VM_DEBUGGER_TYPE_COSA 11;VM_DEBUGGER_TYPE_CDCSerialClass 12;VM_DEBUGGER_TYPE_HARDWARESERIAL1 13;VM_DEBUGGER_TYPE_HARDWARESERIAL2 14;VM_DEBUGGER_TYPE_HARDWARESERIAL3 15;VM_DEBUGGER_TYPE VM_DEBUGGER_TYPE_USB;VM_DEBUGGER_SUB_TYPE VM_DEBUGGER_TYPE_USB_SAM;VM_DEBUG_BREAKPAUSE;" IncludesDebug="1" IsCompiled="1" />
    <Platform Name="arduino16x" Package="arduino" Platform="sam" Architecture="4.8.3-2014q1">
      <Board Name="arduino_due_x" Description="Arduino Due (Native USB Port)" CoreFolder="C:\Users\lester\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.8\cores\arduino" VariantFullPath="C:\Users\lester\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.8\variants\arduino_due_x" McuIdePath="C:\Program Files (x86)\Arduino" McuSketchBookPath="C:\Users\lester\MeDocuments\AppData\Arduino" name="Arduino Due (Native USB Port)" vid.0="0x2341" pid.0="0x003e" vid.1="0x2A03" pid.1="0x003e" upload.tool="bossac" upload.protocol="sam-ba" upload.maximum_size="524288" upload.use_1200bps_touch="true" upload.wait_for_upload_port="true" upload.native_usb="true" build.mcu="cortex-m3" build.f_cpu="84000000L" build.usb_manufacturer="&quot;Arduino LLC&quot;" build.usb_product="&quot;Arduino Due&quot;" build.board="SAM_DUE" build.core="arduino" build.extra_flags="-D__SAM3X8E__ -mthumb {build.usb_flags}" build.ldscript="linker_scripts/gcc/flash.ld" build.variant="arduino_due_x" build.variant_system_lib="libsam_sam3x8e_gcc_rel.a" build.vid="0x2341" build.pid="0x003e" runtime.ide.path="C:\Program Files (x86)\Arduino" runtime.os="windows" build.system.path="C:\Users\lester\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.8\system" runtime.ide.version="10609" target_package="arduino" target_platform="sam" runtime.hardware.path="C:\Users\lester\AppData\Local\arduino15\packages\arduino\hardware\sam" originalid="arduino_due_x" intellisense.tools.path="{runtime.ide.path}/hardware/tools/g++_arm_none_eabi" intellisense.include.paths="{runtime.tools.arm-none-eabi-gcc.path}/arm-none-eabi\include\c++\4.8.3;{runtime.tools.arm-none-eabi-gcc.path}/arm-none-eabi/include/c++/4.8.3/arm-none-eabi/;{runtime.tools.arm-none-eabi-gcc.path}/arm-none-eabi/include/;{runtime.tools.arm-none-eabi-gcc.path}\lib\gcc\arm-none-eabi\4.8.3\include;{build.core.coresparentfolder.vmresolved}\system\CMSIS\Device\ATMEL\;{build.core.coresparentfolder.vmresolved}\system\libsam;{build.core.coresparentfolder.vmresolved}\system\libsam\include;{build.core.coresparentfolder.vmresolved}\system\CMSIS\CMSIS\Include\;{build.core.coresparentfolder.vmresolved}\system\CMSIS\CMSIS\Include\;{vm.boardsource.path}\system\CMSIS\CMSIS\Include\;{vm.boardsource.path}\system\CMSIS\Device\ATMEL\;{vm.boardsource.path}\system\libsam;{vm.boardsource.path}\system\libsam\include;{intellisense.tools.path}\arm-none-eabi\include;{intellisense.tools.path}\arm_none_eabi\include\;{intellisense.tools.path}\lib\gcc\arm-none-eabi\4.4.1\include;{intellisense.tools.path}\lib\gcc\arm-none-eabi\4.4.1\include\;{build.core.coresparentfolder.vmresolved}/system/CMSIS/Device/ATMEL/sam3xa/include/pio;{build.core.coresparentfolder.vmresolved}/system/libsam/include;{build.core.coresparentfolder.vmresolved}/CMSIS/CMSIS/Include/;{build.core.coresparentfolder.vmresolved}/system/CMSIS/Device/ATMEL/sam3xa/include;{build.core.coresparentfolder.vmresolved}\system/libsam;{build.core.coresparentfolder.vmresolved}\system/CMSIS/Device/ATMEL;{build.core.coresparentfolder.vmresolved}\system/CMSIS/Device/ATMEL/sam3xa/include;" tools.atprogram.cmd.path="%AVRSTUDIO_EXE_PATH%\atbackend\atprogram" tools.atprogram.cmd.setwinpath="true" tools.atprogram.program.params.verbose="-v" tools.atprogram.program.params.quiet="-q" tools.atprogram.program.pattern="&quot;{cmd.path}&quot; -d {build.mcu} {program.verbose} {program.extra_params} program -c -f &quot;{build.path}\{build.project_name}.hex&quot;" tools.atprogram.program.xpattern="&quot;{cmd.path}&quot; {AVRSTUDIO_BACKEND_CONNECTION} -d {build.mcu} {program.verbose} {program.extra_params} program -c -f &quot;{build.path}\{build.project_name}.hex&quot;" version="1.6.8" compiler.warning_flags="-w" compiler.warning_flags.none="-w" compiler.warning_flags.default="" compiler.warning_flags.more="-Wall" compiler.warning_flags.all="-Wall -Wextra" compiler.path="{runtime.tools.arm-none-eabi-gcc.path}/bin/" compiler.c.cmd="arm-none-eabi-gcc" compiler.c.flags="-c -g -Os {compiler.warning_flags} -std=gnu11 -ffunction-sections -fdata-sections -nostdlib --param max-inline-insns-single=500 -Dprintf=iprintf -MMD" compiler.c.elf.cmd="arm-none-eabi-gcc" compiler.c.elf.flags="-Os -Wl,--gc-sections" compiler.S.cmd="arm-none-eabi-gcc" compiler.S.flags="-c -g -x assembler-with-cpp" compiler.cpp.cmd="arm-none-eabi-g++" compiler.cpp.flags="-c -g -Os {compiler.warning_flags} -std=gnu++11 -ffunction-sections -fdata-sections -nostdlib -fno-threadsafe-statics --param max-inline-insns-single=500 -fno-rtti -fno-exceptions -Dprintf=iprintf -MMD" compiler.ar.cmd="arm-none-eabi-ar" compiler.ar.flags="rcs" compiler.objcopy.cmd="arm-none-eabi-objcopy" compiler.objcopy.eep.flags="-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0" compiler.elf2hex.flags="-O binary" compiler.elf2hex.cmd="arm-none-eabi-objcopy" compiler.ldflags="" compiler.size.cmd="arm-none-eabi-size" compiler.define="-DARDUINO=" compiler.combine.flags="-u _sbrk -u link -u _close -u _fstat -u _isatty -u _lseek -u _read -u _write -u _exit -u kill -u _getpid" compiler.c.extra_flags="" compiler.c.elf.extra_flags="" compiler.cpp.extra_flags="" compiler.S.extra_flags="" compiler.ar.extra_flags="" compiler.elf2hex.extra_flags="" compiler.libsam.c.flags="&quot;-I{build.system.path}/libsam&quot; &quot;-I{build.system.path}/CMSIS/CMSIS/Include/&quot; &quot;-I{build.system.path}/CMSIS/Device/ATMEL/&quot;" build.usb_flags="-DUSB_VID={build.vid} -DUSB_PID={build.pid} -DUSBCON '-DUSB_MANUFACTURER={build.usb_manufacturer}' '-DUSB_PRODUCT={build.usb_product}'" recipe.c.o.pattern="&quot;{compiler.path}{compiler.c.cmd}&quot; {compiler.c.flags} -mcpu={build.mcu} -mthumb -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.c.extra_flags} {build.extra_flags} {compiler.libsam.c.flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.cpp.o.pattern="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpp.flags} -mcpu={build.mcu} -mthumb -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {compiler.libsam.c.flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.S.o.pattern="&quot;{compiler.path}{compiler.S.cmd}&quot; {compiler.S.flags} -mcpu={build.mcu} -mthumb -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.S.extra_flags} {build.extra_flags} {compiler.libsam.c.flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" archive_file_path="{build.path}/{archive_file}" recipe.ar.pattern="&quot;{compiler.path}{compiler.ar.cmd}&quot; {compiler.ar.flags} {compiler.ar.extra_flags} &quot;{archive_file_path}&quot; &quot;{object_file}&quot;" recipe.c.combine.pattern="&quot;{compiler.path}{compiler.c.elf.cmd}&quot; -mcpu={build.mcu} -mthumb {compiler.c.elf.flags} &quot;-T{build.variant.path}/{build.ldscript}&quot; &quot;-Wl,-Map,{build.path}/{build.project_name}.map&quot; {compiler.c.elf.extra_flags} -o &quot;{build.path}/{build.project_name}.elf&quot; &quot;-L{build.path}&quot; -Wl,--cref -Wl,--check-sections -Wl,--gc-sections -Wl,--entry=Reset_Handler -Wl,--unresolved-symbols=report-all -Wl,--warn-common -Wl,--warn-section-align -Wl,--start-group {compiler.combine.flags} {object_files} &quot;{build.variant.path}/{build.variant_system_lib}&quot; &quot;{build.path}/{archive_file}&quot; -Wl,--end-group -lm -gcc" recipe.objcopy.bin.pattern="&quot;{compiler.path}{compiler.elf2hex.cmd}&quot; {compiler.elf2hex.flags} {compiler.elf2hex.extra_flags} &quot;{build.path}/{build.project_name}.elf&quot; &quot;{build.path}/{build.project_name}.bin&quot;" recipe.output.tmp_file="{build.project_name}.bin" recipe.output.save_file="{build.project_name}.{build.variant}.bin" recipe.size.pattern="&quot;{compiler.path}{compiler.size.cmd}&quot; -A &quot;{build.path}/{build.project_name}.elf&quot;" recipe.size.regex="\.text\s+([0-9]+).*" tools.bossac.path="{runtime.tools.bossac.path}" tools.bossac.cmd="bossac.exe" tools.bossac.cmd.windows="bossac.exe" tools.bossac.upload.params.verbose="-i -d" tools.bossac.upload.params.quiet="" tools.bossac.upload.params.verify="-v" tools.bossac.upload.pattern="&quot;{path}/{cmd}&quot; {upload.verbose} --port={serial.port.file} -U {upload.native_usb} -e -w {upload.verify} -b &quot;{build.path}/{build.project_name}.bin&quot; -R" tools.bossac_remote.upload.pattern="/usr/bin/run-bossac {upload.verbose} --port=ttyATH0 -U {upload.native_usb} -e -w -v -b /tmp/sketch.bin -R" vm.platform.root.path="C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\Extensions\nuze3zh3.ug2\Micro Platforms\arduino16x" runtime.tools.arm-none-eabi-gcc.path="C:\Users\lester\AppData\Local\arduino15\packages\arduino\tools\arm-none-eabi-gcc\4.8.3-2014q1" runtime.tools.arm-none-eabi-gcc-4.8.3-2014q1.path="C:\Users\lester\AppData\Local\arduino15\packages\arduino\tools\arm-none-eabi-gcc\4.8.3-2014q1" runtime.tools.avrdude.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.avrdude-6.0.1-arduino5.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.avr-gcc.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.avr-gcc-4.8.1-arduino5.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.bossac.path="C:\Users\lester\AppData\Local\arduino15\packages\arduino\tools\bossac\1.6.1-arduino" runtime.tools.bossac-1.6.1-arduino.path="C:\Users\lester\AppData\Local\arduino15\packages\arduino\tools\bossac\1.6.1-arduino" runtime.vm.boardinfo.id="arduino_due_x" runtime.vm.boardinfo.name="arduino_due_x" runtime.vm.boardinfo.desc="Arduino Due (Native USB Port)" runtime.vm.boardinfo.src_location="C:\Users\lester\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.8" ide.hint="For all platforms that use Board Manager" ide.location.key="Arduino16x" ide.location.ide.winreg="Arduino 1.6.x Application" ide.location.sketchbook.winreg="Arduino 1.6.x Sketchbook" ide.location.sketchbook.preferences="sketchbook.path" ide.default.revision_name="1.6.9" ide.default.version="10609" ide.default.package="arduino" ide.default.platform="avr" ide.multiplatform="true" ide.includes="arduino.h" ide.exe_name="arduino" ide.platformswithoutpackage="false" ide.includes.fallback="wprogram.h" ide.extension="ino" ide.extension.fallback="pde" ide.versionGTEQ="160" ide.exe="arduino.exe" ide.hosts="atmel" ide.url="http://arduino.cc/en/Main/Software" ide.help.reference.path="reference\arduino.cc\en\Reference" ide.help.reference.path2="reference\www.arduino.cc\en\Reference" ide.help.reference.serial="reference\www.arduino.cc\en\Serial" vm.debug="true" software="ARDUINO" ssh.user.name="root" ssh.user.default.password="arduino" ssh.host.wwwfiles.path="/www/sd" build.working_directory="{runtime.ide.path}" ide.location.preferences.portable="{runtime.ide.path}\portable" ide.location.preferences="%VM_APPDATA_LOCAL%\arduino15\preferences.txt" ide.location.preferences_fallback="%VM_APPDATA_ROAMING%\arduino15\preferences.txt" ide.location.contributions="%VM_APPDATA_LOCAL%\arduino15" ide.location.contributions_fallback="%VM_APPDATA_ROAMING%\arduino15" ide.contributions.boards.allow="true" ide.contributions.boards.ignore_unless_rewrite_found="true" ide.contributions.libraries.allow="true" ide.contributions.boards.support.urls.wiki="https://github.com/arduino/Arduino/wiki/Unofficial-list-of-3rd-party-boards-support-urls" ide.create_platforms_from_boardsTXT.teensy="build.core" ide.appid="arduino16x" location.sketchbook="C:\Users\lester\MeDocuments\AppData\Arduino" build.core.vmresolved="C:\Users\lester\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.8\cores\arduino" build.core.parentfolder.vmresolved="C:\Users\lester\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.8\cores" build.core.coresparentfolder.vmresolved="C:\Users\lester\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.8" build.core.path="C:\Users\lester\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.8\cores\arduino" vm.core.include="arduino.h" vm.boardsource.path="C:\Users\lester\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.8" runtime.platform.path="C:\Users\lester\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.8" vm.platformname.name="sam" build.arch="SAM" build.variant.vmresolved="C:\Users\lester\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.8\variants\arduino_due_x" build.architecture="4.8.3-2014q1" vmresolved.compiler.path="C:\Users\lester\AppData\Local\arduino15\packages\arduino\tools\arm-none-eabi-gcc\4.8.3-2014q1\bin\" vmresolved.tools.path="C:\Users\lester\AppData\Local\arduino15\packages\arduino\tools\arm-none-eabi-gcc\4.8.3-2014q1" vm.runtime.compiler.showwarnings="false" vm.runtime.upload.verbose="false" vm.runtime.upload.verify="false" vm.runtime.compiler.auto_discover_includes="true" vm.last.buildpath="C:\Users\lester\AppData\Local\Temp\VMicroBuilds\FeederDue\arduino_due_x" />
    </Platform>
    <Debug EnableBreak="1" DebugMode="Full" DebugEnabled="1" HitCounterType="0" JumpToSource="0" RemotePortSpeed="115200" LocalPortSpeed="115200" IncludeDisabledBreakpoints="0" IsGdb="0" RemotePortSpeedWrittenToDebugSource="115200" />
    <VCCodeModel>
      <VCCodeMacros />
    </VCCodeModel>
    <BreakPoints>
      <BreakPoint Index="1" Name="FeederDue.ino, line 1213" Id="2eef4562-4a39-4f3e-b305-6e06c10e404c" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\lester\medocuments\research\barneslab\study_icr\code\arduino\feederdue\feederdue.ino" FileLine="1213" FileColumn="1" FunctionName="ParseSerial()" FunctionLineOffset="13" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='2eef4562-4a39-4f3e-b305-6e06c10e404c'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>1206		bool loop;
1207		msg_id == ' ';
1208	
1209		// Dump data till msg header byte is reached
1210		buff = WaitBuffRead(c2r_head[0]);
1211		if (buff == 255)
1212		{
--&gt;1213			return pass = false;
1214		}
1215	
1216		// get header
1217		u.f = 0.0f;
1218		u.b[0] = buff;
1219		u.b[1] = WaitBuffRead(0);
1220		head[0] = u.c[0];
1221		head[1] = u.c[1];
1222	
</Source>
      </BreakPoint>
      <BreakPoint Index="2" Name="FeederDue.ino, line 878" Id="8e605724-4c3b-4881-bcef-e09e5ecc96c8" Enabled="1" Message="{cnt_overflowEvt}{cnt_timeoutEvt}{cnt_packResend} {cnt_droppedPacks}{millis()}{millis() - t_loopMain} {t_loopRead} {Serial1.available()} {Serial1.availableForWrite()}{fc_doQuit}{fc_doMove}{fc_isMoveTargSet}{movePos}{fc_doCue}{fc_isCueTargSet}{rewPos}{fc_isHalted}{fc_doRunPID}{pid.error}{pid.modeNow}{pid.isHoldingForSetpointCrossing} {pid.isHoldingForRew} {pid.ekfReady}{pid.setPos}{pid.runSpeed}{ekf_ratPos}{ekf_robPos}{ekf_ratVel}{ekf_robVel}" MessageTextType="0" PreProcessedMessage="{0}{1}{2} {3}{4}{5} {6} {7} {8}{9}{10}{11}{12}{13}{14}{15}{16}{17}{18}{19}{20} {21} {22}{23}{24}{25}{26}{27}{28}" Condition="millis()%1000 == 0" ConditionType="1" CurrentHits="0" File="c:\users\lester\medocuments\research\barneslab\study_icr\code\arduino\feederdue\feederdue.ino" FileLine="878" FileColumn="1" FunctionName="" FunctionLineOffset="1" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='8e605724-4c3b-4881-bcef-e09e5ecc96c8'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>871		board.hardHiZ();
872		RunMotor('f', 0);
873	
874	}
875	
876	
877	// ---------MAIN LOOP---------
--&gt;878	void loop() {
879	
880		// Store loop time
881		t_loopMain = millis();
882	
883	#pragma region //--- FIRST PASS SETUP ---
884		if (fc_isFirstPass)
885		{
886			// Blink to show setup done
887			SetupBlink();
</Source>
        <MessageVariables>
          <MessageVariable Name="cnt_overflowEvt" Index="1" />
          <MessageVariable Name="cnt_timeoutEvt" Index="2" />
          <MessageVariable Name="cnt_packResend" Index="3" />
          <MessageVariable Name="cnt_droppedPacks" Index="4" />
          <MessageVariable Name="millis()" Index="5" />
          <MessageVariable Name="millis() - t_loopMain" Index="6" />
          <MessageVariable Name="t_loopRead" Index="7" />
          <MessageVariable Name="Serial1.available()" Index="8" />
          <MessageVariable Name="Serial1.availableForWrite()" Index="9" />
          <MessageVariable Name="fc_doQuit" Index="10" />
          <MessageVariable Name="fc_doMove" Index="11" />
          <MessageVariable Name="fc_isMoveTargSet" Index="12" />
          <MessageVariable Name="movePos" Index="13" />
          <MessageVariable Name="fc_doCue" Index="14" />
          <MessageVariable Name="fc_isCueTargSet" Index="15" />
          <MessageVariable Name="rewPos" Index="16" />
          <MessageVariable Name="fc_isHalted" Index="17" />
          <MessageVariable Name="fc_doRunPID" Index="18" />
          <MessageVariable Name="pid.error" Index="19" />
          <MessageVariable Name="pid.modeNow" Index="20" />
          <MessageVariable Name="pid.isHoldingForSetpointCrossing" Index="21" />
          <MessageVariable Name="pid.isHoldingForRew" Index="22" />
          <MessageVariable Name="pid.ekfReady" Index="23" />
          <MessageVariable Name="pid.setPos" Index="24" />
          <MessageVariable Name="pid.runSpeed" Index="25" />
          <MessageVariable Name="ekf_ratPos" Index="26" />
          <MessageVariable Name="ekf_robPos" Index="27" />
          <MessageVariable Name="ekf_ratVel" Index="28" />
          <MessageVariable Name="ekf_robVel" Index="29" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="3" Name="FeederDue.ino, line 1430" Id="534acf10-0eb0-4ce3-886d-e51bde94bc8a" Enabled="1" Message="{msg_id}{match}{buff}{Serial1.available()}" MessageTextType="2" PreProcessedMessage="{0}{1}{2}{3}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\lester\medocuments\research\barneslab\study_icr\code\arduino\feederdue\feederdue.ino" FileLine="1430" FileColumn="1" FunctionName="WaitBuffRead(byte match)" FunctionLineOffset="64" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='534acf10-0eb0-4ce3-886d-e51bde94bc8a'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>1423				}
1424				cnt_overflowEvt++;
1425			}
1426	
1427			// Timed out
1428			if (millis() &gt; t_out)
1429			{
--&gt;1430				cnt_timeoutEvt++;
1431			}
1432			
1433			// Set buff to 255 ((byte)-1) if !pass
1434			buff = 255;
1435		}
1436	
1437		// Store time
1438		t_loopRead = millis() - (t_out - time_out);
1439		// Return buffer
</Source>
        <MessageVariables>
          <MessageVariable Name="msg_id" Index="1" />
          <MessageVariable Name="match" Index="2" />
          <MessageVariable Name="buff" Index="3" />
          <MessageVariable Name="Serial1.available()" Index="4" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="4" Name="FeederDue.ino, line 1424" Id="98c92763-bd2a-4567-8d8a-ff1bbd36c385" Enabled="1" Message="{msg_id}{match}{buff}{Serial1.available()}" MessageTextType="2" PreProcessedMessage="{0}{1}{2}{3}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\lester\medocuments\research\barneslab\study_icr\code\arduino\feederdue\feederdue.ino" FileLine="1424" FileColumn="1" FunctionName="WaitBuffRead(byte match)" FunctionLineOffset="58" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='98c92763-bd2a-4567-8d8a-ff1bbd36c385'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>1417			if (Serial1.available() &gt;= SERIAL_BUFFER_SIZE - 1)
1418			{
1419				// DUMP IT ALL
1420				while (Serial1.available() &gt; 0)
1421				{
1422					Serial1.read();
1423				}
--&gt;1424				cnt_overflowEvt++;
1425			}
1426	
1427			// Timed out
1428			if (millis() &gt; t_out)
1429			{
1430				cnt_timeoutEvt++;
1431			}
1432			
1433			// Set buff to 255 ((byte)-1) if !pass
</Source>
        <MessageVariables>
          <MessageVariable Name="msg_id" Index="1" />
          <MessageVariable Name="match" Index="2" />
          <MessageVariable Name="buff" Index="3" />
          <MessageVariable Name="Serial1.available()" Index="4" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="5" Name="FeederDue.ino, line 1265" Id="293a3ac1-4fc4-4622-aea2-a4da78e43fa2" Enabled="1" Message="{fc_doCue}" MessageTextType="2" PreProcessedMessage="{0}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\lester\medocuments\research\barneslab\study_icr\code\arduino\feederdue\feederdue.ino" FileLine="1265" FileColumn="1" FunctionName="ParseSerial()" FunctionLineOffset="65" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='293a3ac1-4fc4-4622-aea2-a4da78e43fa2'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>1258	
1259			// Get move posm
1260			u.b[0] = WaitBuffRead(0);
1261			u.b[1] = WaitBuffRead(0);
1262			u.b[2] = WaitBuffRead(0);
1263			u.b[3] = WaitBuffRead(0);
1264			movePos = u.f;
--&gt;1265	
1266		}
1267	
1268		// Get Reward data
1269		if (msg_id == 'R')
1270		{
1271			// Reset buffer
1272			u.f = 0.0f;
1273	
1274			// Get move posm
</Source>
        <MessageVariables>
          <MessageVariable Name="fc_doCue" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="6" Name="FeederDue.ino, line 1249" Id="8af906fe-7aab-4b51-a199-9094bf65b378" Enabled="1" Message="{fc_doCue}" MessageTextType="2" PreProcessedMessage="{0}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\lester\medocuments\research\barneslab\study_icr\code\arduino\feederdue\feederdue.ino" FileLine="1249" FileColumn="1" FunctionName="ParseSerial()" FunctionLineOffset="49" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='8af906fe-7aab-4b51-a199-9094bf65b378'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>1242		{
1243	
1244			// Get session comand
1245			setupCmd[0] = WaitBuffRead(0);
1246	
1247			// Get tone condition
1248			setupCmd[1] = WaitBuffRead(0);
--&gt;1249	
1250		}
1251	
1252		// Get MoveTo data
1253		if (msg_id == 'M')
1254		{
1255	
1256			// Reset buffer
1257			u.f = 0.0f;
1258	
</Source>
        <MessageVariables>
          <MessageVariable Name="fc_doCue" Index="1" />
        </MessageVariables>
      </BreakPoint>
    </BreakPoints>
  </Program>
</VisualMicro>