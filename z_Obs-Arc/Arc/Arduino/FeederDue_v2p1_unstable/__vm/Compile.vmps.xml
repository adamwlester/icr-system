<VisualMicro>
  <Program Name="FeederDue" Ext=".ino" Location="C:\Users\lester\MeDocuments\Research\BarnesLab\Study_ICR\Code\Arduino\FeederDue">
    <Compile ReCompileIfSourceIsNewer="1" IsDebugStart="1" CompilerErrors="0" ConfigurationName="Debug" StopOnError="False" OptimiseLibs="True" OptimiseCore="True" BuildPath="C:\Users\lester\AppData\Local\Temp\VMicroBuilds\FeederDue\arduino_due_x" SketchName="FeederDue" ReportDigitalPins="0" ReportAnalogPins="0" ReportI2C="0" ReportFreeMemory="0" IncludeDebug="1" LastDebugPreProcessorDefinitions="VM_DEBUG;VM_DEBUG_ENABLE 1;VM_DEBUG_BANDWIDTH_THROTTLE_MS 25;VM_DEBUGGER_TYPE_HARDWARESERIAL 0;VM_DEBUGGER_TYPE_SOFTWARESERIAL 1;VM_DEBUGGER_TYPE_FASTSERIAL 2;VM_DEBUGGER_TYPE_USB 3;VM_DEBUGGER_TYPE_TEENSY 4;VM_DEBUGGER_TYPE_UART 5;VM_DEBUGGER_TYPE_USART 6;VM_DEBUGGER_TYPE_USBSERIAL 7;VM_DEBUGGER_TYPE_TTYUART 8;VM_DEBUGGER_TYPE_NET_CONSOLE 9;VM_DEBUGGER_TYPE_Uart 10;VM_DEBUGGER_TYPE_COSA 11;VM_DEBUGGER_TYPE_CDCSerialClass 12;VM_DEBUGGER_TYPE_HARDWARESERIAL1 13;VM_DEBUGGER_TYPE_HARDWARESERIAL2 14;VM_DEBUGGER_TYPE_HARDWARESERIAL3 15;VM_DEBUGGER_TYPE VM_DEBUGGER_TYPE_USB;VM_DEBUGGER_SUB_TYPE VM_DEBUGGER_TYPE_USB_SAM;VM_DEBUG_BREAKPAUSE;" IncludesDebug="1" IsCompiled="1" />
    <Platform Name="arduino16x" Package="arduino" Platform="sam" Architecture="4.8.3-2014q1">
      <Board Name="arduino_due_x" Description="Arduino Due (Native USB Port)" CoreFolder="C:\Users\lester\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.8\cores\arduino" VariantFullPath="C:\Users\lester\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.8\variants\arduino_due_x" McuIdePath="C:\Program Files (x86)\Arduino" McuSketchBookPath="C:\Users\lester\MeDocuments\AppData\Arduino" name="Arduino Due (Native USB Port)" vid.0="0x2341" pid.0="0x003e" vid.1="0x2A03" pid.1="0x003e" upload.tool="bossac" upload.protocol="sam-ba" upload.maximum_size="524288" upload.use_1200bps_touch="true" upload.wait_for_upload_port="true" upload.native_usb="true" build.mcu="cortex-m3" build.f_cpu="84000000L" build.usb_manufacturer="&quot;Arduino LLC&quot;" build.usb_product="&quot;Arduino Due&quot;" build.board="SAM_DUE" build.core="arduino" build.extra_flags="-D__SAM3X8E__ -mthumb {build.usb_flags}" build.ldscript="linker_scripts/gcc/flash.ld" build.variant="arduino_due_x" build.variant_system_lib="libsam_sam3x8e_gcc_rel.a" build.vid="0x2341" build.pid="0x003e" runtime.ide.path="C:\Program Files (x86)\Arduino" runtime.os="windows" build.system.path="C:\Users\lester\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.8\system" runtime.ide.version="10609" target_package="arduino" target_platform="sam" runtime.hardware.path="C:\Users\lester\AppData\Local\arduino15\packages\arduino\hardware\sam" originalid="arduino_due_x" intellisense.tools.path="{runtime.ide.path}/hardware/tools/g++_arm_none_eabi" intellisense.include.paths="{runtime.tools.arm-none-eabi-gcc.path}/arm-none-eabi\include\c++\4.8.3;{runtime.tools.arm-none-eabi-gcc.path}/arm-none-eabi/include/c++/4.8.3/arm-none-eabi/;{runtime.tools.arm-none-eabi-gcc.path}/arm-none-eabi/include/;{runtime.tools.arm-none-eabi-gcc.path}\lib\gcc\arm-none-eabi\4.8.3\include;{build.core.coresparentfolder.vmresolved}\system\CMSIS\Device\ATMEL\;{build.core.coresparentfolder.vmresolved}\system\libsam;{build.core.coresparentfolder.vmresolved}\system\libsam\include;{build.core.coresparentfolder.vmresolved}\system\CMSIS\CMSIS\Include\;{build.core.coresparentfolder.vmresolved}\system\CMSIS\CMSIS\Include\;{vm.boardsource.path}\system\CMSIS\CMSIS\Include\;{vm.boardsource.path}\system\CMSIS\Device\ATMEL\;{vm.boardsource.path}\system\libsam;{vm.boardsource.path}\system\libsam\include;{intellisense.tools.path}\arm-none-eabi\include;{intellisense.tools.path}\arm_none_eabi\include\;{intellisense.tools.path}\lib\gcc\arm-none-eabi\4.4.1\include;{intellisense.tools.path}\lib\gcc\arm-none-eabi\4.4.1\include\;{build.core.coresparentfolder.vmresolved}/system/CMSIS/Device/ATMEL/sam3xa/include/pio;{build.core.coresparentfolder.vmresolved}/system/libsam/include;{build.core.coresparentfolder.vmresolved}/CMSIS/CMSIS/Include/;{build.core.coresparentfolder.vmresolved}/system/CMSIS/Device/ATMEL/sam3xa/include;{build.core.coresparentfolder.vmresolved}\system/libsam;{build.core.coresparentfolder.vmresolved}\system/CMSIS/Device/ATMEL;{build.core.coresparentfolder.vmresolved}\system/CMSIS/Device/ATMEL/sam3xa/include;" tools.atprogram.cmd.path="%AVRSTUDIO_EXE_PATH%\atbackend\atprogram" tools.atprogram.cmd.setwinpath="true" tools.atprogram.program.params.verbose="-v" tools.atprogram.program.params.quiet="-q" tools.atprogram.program.pattern="&quot;{cmd.path}&quot; -d {build.mcu} {program.verbose} {program.extra_params} program -c -f &quot;{build.path}\{build.project_name}.hex&quot;" tools.atprogram.program.xpattern="&quot;{cmd.path}&quot; {AVRSTUDIO_BACKEND_CONNECTION} -d {build.mcu} {program.verbose} {program.extra_params} program -c -f &quot;{build.path}\{build.project_name}.hex&quot;" version="1.6.8" compiler.warning_flags="-w" compiler.warning_flags.none="-w" compiler.warning_flags.default="" compiler.warning_flags.more="-Wall" compiler.warning_flags.all="-Wall -Wextra" compiler.path="{runtime.tools.arm-none-eabi-gcc.path}/bin/" compiler.c.cmd="arm-none-eabi-gcc" compiler.c.flags="-c -g -Os {compiler.warning_flags} -std=gnu11 -ffunction-sections -fdata-sections -nostdlib --param max-inline-insns-single=500 -Dprintf=iprintf -MMD" compiler.c.elf.cmd="arm-none-eabi-gcc" compiler.c.elf.flags="-Os -Wl,--gc-sections" compiler.S.cmd="arm-none-eabi-gcc" compiler.S.flags="-c -g -x assembler-with-cpp" compiler.cpp.cmd="arm-none-eabi-g++" compiler.cpp.flags="-c -g -Os {compiler.warning_flags} -std=gnu++11 -ffunction-sections -fdata-sections -nostdlib -fno-threadsafe-statics --param max-inline-insns-single=500 -fno-rtti -fno-exceptions -Dprintf=iprintf -MMD" compiler.ar.cmd="arm-none-eabi-ar" compiler.ar.flags="rcs" compiler.objcopy.cmd="arm-none-eabi-objcopy" compiler.objcopy.eep.flags="-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0" compiler.elf2hex.flags="-O binary" compiler.elf2hex.cmd="arm-none-eabi-objcopy" compiler.ldflags="" compiler.size.cmd="arm-none-eabi-size" compiler.define="-DARDUINO=" compiler.combine.flags="-u _sbrk -u link -u _close -u _fstat -u _isatty -u _lseek -u _read -u _write -u _exit -u kill -u _getpid" compiler.c.extra_flags="" compiler.c.elf.extra_flags="" compiler.cpp.extra_flags="" compiler.S.extra_flags="" compiler.ar.extra_flags="" compiler.elf2hex.extra_flags="" compiler.libsam.c.flags="&quot;-I{build.system.path}/libsam&quot; &quot;-I{build.system.path}/CMSIS/CMSIS/Include/&quot; &quot;-I{build.system.path}/CMSIS/Device/ATMEL/&quot;" build.usb_flags="-DUSB_VID={build.vid} -DUSB_PID={build.pid} -DUSBCON '-DUSB_MANUFACTURER={build.usb_manufacturer}' '-DUSB_PRODUCT={build.usb_product}'" recipe.c.o.pattern="&quot;{compiler.path}{compiler.c.cmd}&quot; {compiler.c.flags} -mcpu={build.mcu} -mthumb -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.c.extra_flags} {build.extra_flags} {compiler.libsam.c.flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.cpp.o.pattern="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpp.flags} -mcpu={build.mcu} -mthumb -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {compiler.libsam.c.flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.S.o.pattern="&quot;{compiler.path}{compiler.S.cmd}&quot; {compiler.S.flags} -mcpu={build.mcu} -mthumb -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.S.extra_flags} {build.extra_flags} {compiler.libsam.c.flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" archive_file_path="{build.path}/{archive_file}" recipe.ar.pattern="&quot;{compiler.path}{compiler.ar.cmd}&quot; {compiler.ar.flags} {compiler.ar.extra_flags} &quot;{archive_file_path}&quot; &quot;{object_file}&quot;" recipe.c.combine.pattern="&quot;{compiler.path}{compiler.c.elf.cmd}&quot; -mcpu={build.mcu} -mthumb {compiler.c.elf.flags} &quot;-T{build.variant.path}/{build.ldscript}&quot; &quot;-Wl,-Map,{build.path}/{build.project_name}.map&quot; {compiler.c.elf.extra_flags} -o &quot;{build.path}/{build.project_name}.elf&quot; &quot;-L{build.path}&quot; -Wl,--cref -Wl,--check-sections -Wl,--gc-sections -Wl,--entry=Reset_Handler -Wl,--unresolved-symbols=report-all -Wl,--warn-common -Wl,--warn-section-align -Wl,--start-group {compiler.combine.flags} {object_files} &quot;{build.variant.path}/{build.variant_system_lib}&quot; &quot;{build.path}/{archive_file}&quot; -Wl,--end-group -lm -gcc" recipe.objcopy.bin.pattern="&quot;{compiler.path}{compiler.elf2hex.cmd}&quot; {compiler.elf2hex.flags} {compiler.elf2hex.extra_flags} &quot;{build.path}/{build.project_name}.elf&quot; &quot;{build.path}/{build.project_name}.bin&quot;" recipe.output.tmp_file="{build.project_name}.bin" recipe.output.save_file="{build.project_name}.{build.variant}.bin" recipe.size.pattern="&quot;{compiler.path}{compiler.size.cmd}&quot; -A &quot;{build.path}/{build.project_name}.elf&quot;" recipe.size.regex="\.text\s+([0-9]+).*" tools.bossac.path="{runtime.tools.bossac.path}" tools.bossac.cmd="bossac.exe" tools.bossac.cmd.windows="bossac.exe" tools.bossac.upload.params.verbose="-i -d" tools.bossac.upload.params.quiet="" tools.bossac.upload.params.verify="-v" tools.bossac.upload.pattern="&quot;{path}/{cmd}&quot; {upload.verbose} --port={serial.port.file} -U {upload.native_usb} -e -w {upload.verify} -b &quot;{build.path}/{build.project_name}.bin&quot; -R" tools.bossac_remote.upload.pattern="/usr/bin/run-bossac {upload.verbose} --port=ttyATH0 -U {upload.native_usb} -e -w -v -b /tmp/sketch.bin -R" vm.platform.root.path="C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\Extensions\etfibjxm.wg0\Micro Platforms\arduino16x" runtime.tools.arm-none-eabi-gcc.path="C:\Users\lester\AppData\Local\arduino15\packages\arduino\tools\arm-none-eabi-gcc\4.8.3-2014q1" runtime.tools.arm-none-eabi-gcc-4.8.3-2014q1.path="C:\Users\lester\AppData\Local\arduino15\packages\arduino\tools\arm-none-eabi-gcc\4.8.3-2014q1" runtime.tools.avrdude.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.avrdude-6.0.1-arduino5.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.avr-gcc.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.avr-gcc-4.8.1-arduino5.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.bossac.path="C:\Users\lester\AppData\Local\arduino15\packages\arduino\tools\bossac\1.6.1-arduino" runtime.tools.bossac-1.6.1-arduino.path="C:\Users\lester\AppData\Local\arduino15\packages\arduino\tools\bossac\1.6.1-arduino" runtime.vm.boardinfo.id="arduino_due_x" runtime.vm.boardinfo.name="arduino_due_x" runtime.vm.boardinfo.desc="Arduino Due (Native USB Port)" runtime.vm.boardinfo.src_location="C:\Users\lester\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.8" ide.hint="For all platforms that use Board Manager" ide.location.key="Arduino16x" ide.location.ide.winreg="Arduino 1.6.x Application" ide.location.sketchbook.winreg="Arduino 1.6.x Sketchbook" ide.location.sketchbook.preferences="sketchbook.path" ide.default.revision_name="1.6.9" ide.default.version="10609" ide.default.package="arduino" ide.default.platform="avr" ide.multiplatform="true" ide.includes="arduino.h" ide.exe_name="arduino" ide.platformswithoutpackage="false" ide.includes.fallback="wprogram.h" ide.extension="ino" ide.extension.fallback="pde" ide.versionGTEQ="160" ide.exe="arduino.exe" ide.hosts="atmel" ide.url="http://arduino.cc/en/Main/Software" ide.help.reference.path="reference\arduino.cc\en\Reference" ide.help.reference.path2="reference\www.arduino.cc\en\Reference" ide.help.reference.serial="reference\www.arduino.cc\en\Serial" vm.debug="true" software="ARDUINO" ssh.user.name="root" ssh.user.default.password="arduino" ssh.host.wwwfiles.path="/www/sd" build.working_directory="{runtime.ide.path}" ide.location.preferences.portable="{runtime.ide.path}\portable" ide.location.preferences="%VM_APPDATA_LOCAL%\arduino15\preferences.txt" ide.location.preferences_fallback="%VM_APPDATA_ROAMING%\arduino15\preferences.txt" ide.location.contributions="%VM_APPDATA_LOCAL%\arduino15" ide.location.contributions_fallback="%VM_APPDATA_ROAMING%\arduino15" ide.contributions.boards.allow="true" ide.contributions.boards.ignore_unless_rewrite_found="true" ide.contributions.libraries.allow="true" ide.contributions.boards.support.urls.wiki="https://github.com/arduino/Arduino/wiki/Unofficial-list-of-3rd-party-boards-support-urls" ide.create_platforms_from_boardsTXT.teensy="build.core" ide.appid="arduino16x" location.sketchbook="C:\Users\lester\MeDocuments\AppData\Arduino" build.core.vmresolved="C:\Users\lester\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.8\cores\arduino" build.core.parentfolder.vmresolved="C:\Users\lester\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.8\cores" build.core.coresparentfolder.vmresolved="C:\Users\lester\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.8" build.core.path="C:\Users\lester\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.8\cores\arduino" vm.core.include="arduino.h" vm.boardsource.path="C:\Users\lester\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.8" runtime.platform.path="C:\Users\lester\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.8" vm.platformname.name="sam" build.arch="SAM" build.variant.vmresolved="C:\Users\lester\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.8\variants\arduino_due_x" build.architecture="4.8.3-2014q1" vmresolved.compiler.path="C:\Users\lester\AppData\Local\arduino15\packages\arduino\tools\arm-none-eabi-gcc\4.8.3-2014q1\bin\" vmresolved.tools.path="C:\Users\lester\AppData\Local\arduino15\packages\arduino\tools\arm-none-eabi-gcc\4.8.3-2014q1" vm.runtime.compiler.showwarnings="false" vm.runtime.upload.verbose="false" vm.runtime.upload.verify="false" vm.runtime.compiler.auto_discover_includes="true" vm.last.buildpath="C:\Users\lester\AppData\Local\Temp\VMicroBuilds\FeederDue\arduino_due_x" />
    </Platform>
    <Debug EnableBreak="1" DebugMode="Full" DebugEnabled="1" IsGdb="0" RemotePortSpeedWrittenToDebugSource="115200" />
    <VCCodeModel>
      <VCCodeMacros />
    </VCCodeModel>
    <BreakPoints>
      <BreakPoint Index="1" Name="FeederDue.ino, line 1284" Id="f65909f1-b016-4db7-984c-3c037bedec9d" Enabled="0" Message="{PcAvg}{PcNow}" MessageTextType="2" PreProcessedMessage="{0}{1}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\lester\medocuments\research\barneslab\study_icr\code\arduino\feederdue\feederdue.ino" FileLine="1284" FileColumn="1" FunctionName="UpdateSpeed()" FunctionLineOffset="66" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='f65909f1-b016-4db7-984c-3c037bedec9d'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>1277					PcCount++;
1278					PcNow = t_Pc[1] - t_Pc[0];
1279					PcSum += PcNow;
1280					PcAvg = (float)(PcSum) / PcCount;
1281	
1282				}
1283			}
--&gt;1284			errCount++;
1285			errSum += abs(error);
1286			errAvg = errSum / errCount;
1287			errMax = max(errMax, error);
1288			errMin = max(errMin, error);
1289	
1290			// If robot runs over rat
1291			if (error &lt; setPoint*-1);
1292		}
1293	
</Source>
        <MessageVariables>
          <MessageVariable Name="PcAvg" Index="1" />
          <MessageVariable Name="PcNow" Index="2" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="2" Name="FeederDue.ino, line 1292" Id="87280bf8-9c9c-4c47-8c99-8b81a1d1cb09" Enabled="0" Message="{@Plot.A.error.Red error}{@Plot.A.errAvg.Black errAvg}{errMin}{errMax}" MessageTextType="2" PreProcessedMessage="{0}{1}{2}{3}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\lester\medocuments\research\barneslab\study_icr\code\arduino\feederdue\feederdue.ino" FileLine="1292" FileColumn="1" FunctionName="UpdateSpeed()" FunctionLineOffset="74" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='87280bf8-9c9c-4c47-8c99-8b81a1d1cb09'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>1285			errSum += abs(error);
1286			errAvg = errSum / errCount;
1287			errMax = max(errMax, error);
1288			errMin = max(errMin, error);
1289	
1290			// If robot runs over rat
1291			if (error &lt; setPoint*-1);
--&gt;1292		}
1293	
1294		// Updatew last error
1295		lastError = error;
1296	
1297	}
1298	
1299	#pragma endregion
1300	
1301	
</Source>
        <MessageVariables>
          <MessageVariable Name="@Plot.A.error.Red error" Index="1" />
          <MessageVariable Name="@Plot.A.errAvg.Black errAvg" Index="2" />
          <MessageVariable Name="errMin" Index="3" />
          <MessageVariable Name="errMax" Index="4" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="3" Name="FeederDue.ino, line 1246" Id="2ebb8bd5-7e01-4da6-930b-c59efd4a1c00" Enabled="0" Message="{@Plot.E.error.Red error}{@Plot.P.pTerm.Black pTerm}{@Plot.I.iTerm.Blue iTerm}{@Plot.D.dTerm.Green dTerm}{@Plot.B.estRobVel.DarkGray estRobVel}{@Plot.B.estRatVel.Blue estRatVel}" MessageTextType="2" PreProcessedMessage="{0}{1}{2}{3}{4}{5}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\lester\medocuments\research\barneslab\study_icr\code\arduino\feederdue\feederdue.ino" FileLine="1246" FileColumn="1" FunctionName="UpdateSpeed()" FunctionLineOffset="28" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='2ebb8bd5-7e01-4da6-930b-c59efd4a1c00'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>1239		float pTerm = Kp*error;
1240		float iTerm = Ki*integral;
1241		float dTerm = Kd*derivative;
1242		//if (error &lt; 0) dTerm = dTerm * 2.0f;
1243	
1244		// Compute updated vel
1245		velUpdate = pTerm + iTerm + dTerm;
--&gt;1246		runSpeed = estRobVel + velUpdate;
1247	
1248		// Keep speed in range [0, maxSpeed]
1249		if (runSpeed &gt; maxSpeed) runSpeed = maxSpeed;
1250		else if (runSpeed &lt; 0) runSpeed = 0;
1251	
1252		// If rat stopped behind target halt running
1253		if (estRatVel &lt; 1 &amp;&amp; error &lt; 0 &amp;&amp; !haltRun)
1254		{
1255			Interupt_Halt();
</Source>
        <MessageVariables>
          <MessageVariable Name="@Plot.E.error.Red error" Index="1" />
          <MessageVariable Name="@Plot.P.pTerm.Black pTerm" Index="2" />
          <MessageVariable Name="@Plot.I.iTerm.Blue iTerm" Index="3" />
          <MessageVariable Name="@Plot.D.dTerm.Green dTerm" Index="4" />
          <MessageVariable Name="@Plot.B.estRobVel.DarkGray estRobVel" Index="5" />
          <MessageVariable Name="@Plot.B.estRatVel.Blue estRatVel" Index="6" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="4" Name="FeederDue.ino, line 1217" Id="882e92cc-a415-4286-97cc-4350757073f7" Enabled="0" Message="{@Plot.B.estRobVel.Green estRobVel}{@Plot.B.estRatVel.Blue estRatVel}" MessageTextType="2" PreProcessedMessage="{0}{1}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\lester\medocuments\research\barneslab\study_icr\code\arduino\feederdue\feederdue.ino" FileLine="1217" FileColumn="1" FunctionName="" FunctionLineOffset="1" FunctionColumnOffset="1" HitCountTarget="25" HitCountType="4" Language="C++" LocationType="3" Tag="&lt;vmbp Id='882e92cc-a415-4286-97cc-4350757073f7'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>1210		estrob_pos = ekf.getX(1);
1211		estRatVel = ekf.getX(2);
1212		estRobVel = ekf.getX(3);
1213	
1214	
1215	}
1216	
--&gt;1217	// RUN PID AND UPDATE ROBOT SPEED
1218	void UpdateSpeed()
1219	{
1220		//----------UPDATE PID---------
1221	
1222			// Compute error and other terms
1223		setPos = estrob_pos + setPoint;
1224		error = estRatPos - setPos;
1225		if (do_includeTerm[0])
1226		{
</Source>
        <MessageVariables>
          <MessageVariable Name="@Plot.B.estRobVel.Green estRobVel" Index="1" />
          <MessageVariable Name="@Plot.B.estRatVel.Blue estRatVel" Index="2" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="5" Name="FeederDue.ino, line 1218" Id="363b3d7b-1597-45e3-9a58-71d8228afd09" Enabled="0" Message="{@Plot.B.estRobPos.Green estRobPos}{@Plot.B.estRatPos.Blue estRatPos}{@Plot.B.setPos.Red setPos}" MessageTextType="2" PreProcessedMessage="{0}{1}{2}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\lester\medocuments\research\barneslab\study_icr\code\arduino\feederdue\feederdue.ino" FileLine="1218" FileColumn="1" FunctionName="" FunctionLineOffset="1" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='363b3d7b-1597-45e3-9a58-71d8228afd09'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>1211		estRatVel = ekf.getX(2);
1212		estRobVel = ekf.getX(3);
1213	
1214	
1215	}
1216	
1217	// RUN PID AND UPDATE ROBOT SPEED
--&gt;1218	void UpdateSpeed()
1219	{
1220		//----------UPDATE PID---------
1221	
1222			// Compute error and other terms
1223		setPos = estrob_pos + setPoint;
1224		error = estRatPos - setPos;
1225		if (do_includeTerm[0])
1226		{
1227			// Catch zero crossing
</Source>
        <MessageVariables>
          <MessageVariable Name="@Plot.B.estRobPos.Green estRobPos" Index="1" />
          <MessageVariable Name="@Plot.B.estRatPos.Blue estRatPos" Index="2" />
          <MessageVariable Name="@Plot.B.setPos.Red setPos" Index="3" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="6" Name="FeederDue.ino, line 1024" Id="5e37f384-ec95-44d4-8e6c-f66f8d68862b" Enabled="1" Message="{movePos}{set_pos}{rob_pos}{moveStart}{vtRobHist.nLaps}{moveDist}{moveDir}" MessageTextType="2" PreProcessedMessage="{0}{1}{2}{3}{4}{5}{6}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\lester\medocuments\research\barneslab\study_icr\code\arduino\feederdue\feederdue.ino" FileLine="1024" FileColumn="1" FunctionName="DoMove()" FunctionLineOffset="39" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='5e37f384-ec95-44d4-8e6c-f66f8d68862b'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>1017				board.run(FWD, moveSpeed * cm2stp);
1018			}
1019			else
1020			{
1021				moveDir = 'r';
1022				board.run(REV, moveSpeed * cm2stp);
1023			}
--&gt;1024			baseSpeed = moveSpeed;
1025			return true;
1026		}
1027		else
1028		{
1029			return false;
1030		}
1031	
1032	}
1033	
</Source>
        <MessageVariables>
          <MessageVariable Name="movePos" Index="1" />
          <MessageVariable Name="set_pos" Index="2" />
          <MessageVariable Name="rob_pos" Index="3" />
          <MessageVariable Name="moveStart" Index="4" />
          <MessageVariable Name="vtRobHist.nLaps" Index="5" />
          <MessageVariable Name="moveDist" Index="6" />
          <MessageVariable Name="moveDir" Index="7" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="7" Name="FeederDue.ino, line 1050" Id="10674a6f-65cb-424f-be62-d22e669ea134" Enabled="1" Message="{dist_gone}{dist_left}{new_speed}" MessageTextType="2" PreProcessedMessage="{0}{1}{2}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\lester\medocuments\research\barneslab\study_icr\code\arduino\feederdue\feederdue.ino" FileLine="1050" FileColumn="1" FunctionName="CheckMove()" FunctionLineOffset="16" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='10674a6f-65cb-424f-be62-d22e669ea134'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>1043		// Add total distance
1044		dist_last = dist_gone;
1045		dist_gone =
1046			min((140 * PI) - abs(vtRobHist.posNow - moveStart), abs(vtRobHist.posNow - moveStart));
1047	
1048		// Get remaining distance
1049		dist_left = moveDist - dist_gone;
--&gt;1050	
1051		// Only run for new data
1052		if (dist_gone != dist_last)
1053		{
1054			// Check if rat is decPos cm from target
1055			if (dist_left &lt;= decPos &amp;&amp; dist_left &gt; 0.1)
1056			{
1057				// Get base speed to decelerate from
1058				if (baseSpeed == 1000)
1059				{
</Source>
        <MessageVariables>
          <MessageVariable Name="dist_gone" Index="1" />
          <MessageVariable Name="dist_left" Index="2" />
          <MessageVariable Name="new_speed" Index="3" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="8" Name="FeederDue.ino, line 1070" Id="1bdcf15b-801b-4238-b810-9dcdeed93f26" Enabled="1" Message="{baseSpeed}{new_speed}" MessageTextType="2" PreProcessedMessage="{0}{1}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\lester\medocuments\research\barneslab\study_icr\code\arduino\feederdue\feederdue.ino" FileLine="1070" FileColumn="1" FunctionName="CheckMove()" FunctionLineOffset="36" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='1bdcf15b-801b-4238-b810-9dcdeed93f26'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>1063					}
1064					else baseSpeed = abs(vtRobHist.velNow);				
1065				}
1066				// Update decel speed
1067				else
1068				{
1069					new_speed = (dist_left / decPos) * baseSpeed;
--&gt;1070					if (new_speed &lt; 2.5) new_speed = 2.5;
1071					// Change speed
1072					if (moveDir == 'f') board.run(FWD, new_speed);
1073					else if (moveDir == 'r') board.run(REV, new_speed);
1074					// SerialUSB.println(new_speed);
1075				}
1076			}
1077		}
1078		// Rat has reached target
1079		if (dist_left &lt;= 0)
</Source>
        <MessageVariables>
          <MessageVariable Name="baseSpeed" Index="1" />
          <MessageVariable Name="new_speed" Index="2" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="9" Name="FeederDue.ino, line 1142" Id="ce7be345-943d-4b73-b8f6-f1d55d1ac069" Enabled="1" Message="{@Plot.A.Pos.Black vtRobHist.posNow}" MessageTextType="2" PreProcessedMessage="{0}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\lester\medocuments\research\barneslab\study_icr\code\arduino\feederdue\feederdue.ino" FileLine="1142" FileColumn="1" FunctionName="UpdatePos()" FunctionLineOffset="16" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='ce7be345-943d-4b73-b8f6-f1d55d1ac069'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>1135		// UPDATE ROBOT
1136		if (posUpdate[1])
1137		{
1138			// Update robot first
1139			vtRobHist.UpdatePosVel(vtCM[1], vtTS[1]);
1140	
1141			// Check for new data next loop
--&gt;1142			posUpdate[1] = false;
1143		}
1144	
1145		// UPDATE RAT
1146		if (posUpdate[0] &amp;&amp; posUpdate[2])
1147		{
1148			if (do_simulateRat)
1149			{
1150				// Add noise for pixy input
1151				pixyCM = vtCM[0] + (float)random(0, 10) / 100;
</Source>
        <MessageVariables>
          <MessageVariable Name="@Plot.A.Pos.Black vtRobHist.posNow" Index="1" />
        </MessageVariables>
      </BreakPoint>
    </BreakPoints>
  </Program>
</VisualMicro>